// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MATSimInterface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MATSimInterface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace org {
namespace matsim {
namespace hybrid {

namespace {

const ::google::protobuf::Descriptor* MATSim2ExternPutAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MATSim2ExternPutAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MATSim2ExternPutAgent_Agent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MATSim2ExternPutAgent_Agent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MATSim2ExternHasSpace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MATSim2ExternHasSpace_reflection_ = NULL;
const ::google::protobuf::Descriptor* MATSim2ExternHasSpaceConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MATSim2ExternHasSpaceConfirmed_reflection_ = NULL;
const ::google::protobuf::Descriptor* MATSim2ExternPutAgentConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MATSim2ExternPutAgentConfirmed_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extern2MATSim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extern2MATSim_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extern2MATSim_Agent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extern2MATSim_Agent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extern2MATSimTrajectories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extern2MATSimTrajectories_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extern2MATSimTrajectories_Agent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extern2MATSimTrajectories_Agent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MATSim2ExternTrajectoriesReceived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MATSim2ExternTrajectoriesReceived_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extern2MATSimConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extern2MATSimConfirmed_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternSimStepFinished_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternSimStepFinished_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternSimStepFinishedReceived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternSimStepFinishedReceived_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternDoSimStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternDoSimStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternDoSimStepReceived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternDoSimStepReceived_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternOnPrepareSim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternOnPrepareSim_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternOnPrepareSimConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternOnPrepareSimConfirmed_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternAfterSim_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternAfterSim_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternAfterSimConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternAfterSimConfirmed_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentsStuck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentsStuck_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentsStuckConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentsStuckConfirmed_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExternalConnectConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExternalConnectConfirmed_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaximumNumberOfAgents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaximumNumberOfAgents_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaximumNumberOfAgentsConfirmed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaximumNumberOfAgentsConfirmed_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MATSimInterface_2eproto() {
  protobuf_AddDesc_MATSimInterface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MATSimInterface.proto");
  GOOGLE_CHECK(file != NULL);
  MATSim2ExternPutAgent_descriptor_ = file->message_type(0);
  static const int MATSim2ExternPutAgent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent, agent_),
  };
  MATSim2ExternPutAgent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MATSim2ExternPutAgent_descriptor_,
      MATSim2ExternPutAgent::default_instance_,
      MATSim2ExternPutAgent_offsets_,
      -1,
      -1,
      -1,
      sizeof(MATSim2ExternPutAgent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent, _is_default_instance_));
  MATSim2ExternPutAgent_Agent_descriptor_ = MATSim2ExternPutAgent_descriptor_->nested_type(0);
  static const int MATSim2ExternPutAgent_Agent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent_Agent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent_Agent, enternode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent_Agent, nodes_),
  };
  MATSim2ExternPutAgent_Agent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MATSim2ExternPutAgent_Agent_descriptor_,
      MATSim2ExternPutAgent_Agent::default_instance_,
      MATSim2ExternPutAgent_Agent_offsets_,
      -1,
      -1,
      -1,
      sizeof(MATSim2ExternPutAgent_Agent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent_Agent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgent_Agent, _is_default_instance_));
  MATSim2ExternHasSpace_descriptor_ = file->message_type(1);
  static const int MATSim2ExternHasSpace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternHasSpace, nodeid_),
  };
  MATSim2ExternHasSpace_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MATSim2ExternHasSpace_descriptor_,
      MATSim2ExternHasSpace::default_instance_,
      MATSim2ExternHasSpace_offsets_,
      -1,
      -1,
      -1,
      sizeof(MATSim2ExternHasSpace),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternHasSpace, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternHasSpace, _is_default_instance_));
  MATSim2ExternHasSpaceConfirmed_descriptor_ = file->message_type(2);
  static const int MATSim2ExternHasSpaceConfirmed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternHasSpaceConfirmed, hasspace_),
  };
  MATSim2ExternHasSpaceConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MATSim2ExternHasSpaceConfirmed_descriptor_,
      MATSim2ExternHasSpaceConfirmed::default_instance_,
      MATSim2ExternHasSpaceConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(MATSim2ExternHasSpaceConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternHasSpaceConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternHasSpaceConfirmed, _is_default_instance_));
  MATSim2ExternPutAgentConfirmed_descriptor_ = file->message_type(3);
  static const int MATSim2ExternPutAgentConfirmed_offsets_[1] = {
  };
  MATSim2ExternPutAgentConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MATSim2ExternPutAgentConfirmed_descriptor_,
      MATSim2ExternPutAgentConfirmed::default_instance_,
      MATSim2ExternPutAgentConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(MATSim2ExternPutAgentConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgentConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternPutAgentConfirmed, _is_default_instance_));
  Extern2MATSim_descriptor_ = file->message_type(4);
  static const int Extern2MATSim_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSim, agent_),
  };
  Extern2MATSim_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Extern2MATSim_descriptor_,
      Extern2MATSim::default_instance_,
      Extern2MATSim_offsets_,
      -1,
      -1,
      -1,
      sizeof(Extern2MATSim),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSim, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSim, _is_default_instance_));
  Extern2MATSim_Agent_descriptor_ = Extern2MATSim_descriptor_->nested_type(0);
  static const int Extern2MATSim_Agent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSim_Agent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSim_Agent, leavenode_),
  };
  Extern2MATSim_Agent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Extern2MATSim_Agent_descriptor_,
      Extern2MATSim_Agent::default_instance_,
      Extern2MATSim_Agent_offsets_,
      -1,
      -1,
      -1,
      sizeof(Extern2MATSim_Agent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSim_Agent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSim_Agent, _is_default_instance_));
  Extern2MATSimTrajectories_descriptor_ = file->message_type(5);
  static const int Extern2MATSimTrajectories_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories, agent_),
  };
  Extern2MATSimTrajectories_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Extern2MATSimTrajectories_descriptor_,
      Extern2MATSimTrajectories::default_instance_,
      Extern2MATSimTrajectories_offsets_,
      -1,
      -1,
      -1,
      sizeof(Extern2MATSimTrajectories),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories, _is_default_instance_));
  Extern2MATSimTrajectories_Agent_descriptor_ = Extern2MATSimTrajectories_descriptor_->nested_type(0);
  static const int Extern2MATSimTrajectories_Agent_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, angle_),
  };
  Extern2MATSimTrajectories_Agent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Extern2MATSimTrajectories_Agent_descriptor_,
      Extern2MATSimTrajectories_Agent::default_instance_,
      Extern2MATSimTrajectories_Agent_offsets_,
      -1,
      -1,
      -1,
      sizeof(Extern2MATSimTrajectories_Agent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimTrajectories_Agent, _is_default_instance_));
  MATSim2ExternTrajectoriesReceived_descriptor_ = file->message_type(6);
  static const int MATSim2ExternTrajectoriesReceived_offsets_[1] = {
  };
  MATSim2ExternTrajectoriesReceived_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MATSim2ExternTrajectoriesReceived_descriptor_,
      MATSim2ExternTrajectoriesReceived::default_instance_,
      MATSim2ExternTrajectoriesReceived_offsets_,
      -1,
      -1,
      -1,
      sizeof(MATSim2ExternTrajectoriesReceived),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternTrajectoriesReceived, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MATSim2ExternTrajectoriesReceived, _is_default_instance_));
  Extern2MATSimConfirmed_descriptor_ = file->message_type(7);
  static const int Extern2MATSimConfirmed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimConfirmed, accepted_),
  };
  Extern2MATSimConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Extern2MATSimConfirmed_descriptor_,
      Extern2MATSimConfirmed::default_instance_,
      Extern2MATSimConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(Extern2MATSimConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extern2MATSimConfirmed, _is_default_instance_));
  ExternSimStepFinished_descriptor_ = file->message_type(8);
  static const int ExternSimStepFinished_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSimStepFinished, time_),
  };
  ExternSimStepFinished_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternSimStepFinished_descriptor_,
      ExternSimStepFinished::default_instance_,
      ExternSimStepFinished_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternSimStepFinished),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSimStepFinished, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSimStepFinished, _is_default_instance_));
  ExternSimStepFinishedReceived_descriptor_ = file->message_type(9);
  static const int ExternSimStepFinishedReceived_offsets_[1] = {
  };
  ExternSimStepFinishedReceived_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternSimStepFinishedReceived_descriptor_,
      ExternSimStepFinishedReceived::default_instance_,
      ExternSimStepFinishedReceived_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternSimStepFinishedReceived),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSimStepFinishedReceived, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternSimStepFinishedReceived, _is_default_instance_));
  ExternDoSimStep_descriptor_ = file->message_type(10);
  static const int ExternDoSimStep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternDoSimStep, fromtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternDoSimStep, totime_),
  };
  ExternDoSimStep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternDoSimStep_descriptor_,
      ExternDoSimStep::default_instance_,
      ExternDoSimStep_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternDoSimStep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternDoSimStep, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternDoSimStep, _is_default_instance_));
  ExternDoSimStepReceived_descriptor_ = file->message_type(11);
  static const int ExternDoSimStepReceived_offsets_[1] = {
  };
  ExternDoSimStepReceived_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternDoSimStepReceived_descriptor_,
      ExternDoSimStepReceived::default_instance_,
      ExternDoSimStepReceived_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternDoSimStepReceived),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternDoSimStepReceived, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternDoSimStepReceived, _is_default_instance_));
  ExternOnPrepareSim_descriptor_ = file->message_type(12);
  static const int ExternOnPrepareSim_offsets_[1] = {
  };
  ExternOnPrepareSim_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternOnPrepareSim_descriptor_,
      ExternOnPrepareSim::default_instance_,
      ExternOnPrepareSim_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternOnPrepareSim),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternOnPrepareSim, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternOnPrepareSim, _is_default_instance_));
  ExternOnPrepareSimConfirmed_descriptor_ = file->message_type(13);
  static const int ExternOnPrepareSimConfirmed_offsets_[1] = {
  };
  ExternOnPrepareSimConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternOnPrepareSimConfirmed_descriptor_,
      ExternOnPrepareSimConfirmed::default_instance_,
      ExternOnPrepareSimConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternOnPrepareSimConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternOnPrepareSimConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternOnPrepareSimConfirmed, _is_default_instance_));
  ExternAfterSim_descriptor_ = file->message_type(14);
  static const int ExternAfterSim_offsets_[1] = {
  };
  ExternAfterSim_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternAfterSim_descriptor_,
      ExternAfterSim::default_instance_,
      ExternAfterSim_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternAfterSim),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternAfterSim, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternAfterSim, _is_default_instance_));
  ExternAfterSimConfirmed_descriptor_ = file->message_type(15);
  static const int ExternAfterSimConfirmed_offsets_[1] = {
  };
  ExternAfterSimConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternAfterSimConfirmed_descriptor_,
      ExternAfterSimConfirmed::default_instance_,
      ExternAfterSimConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternAfterSimConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternAfterSimConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternAfterSimConfirmed, _is_default_instance_));
  AgentsStuck_descriptor_ = file->message_type(16);
  static const int AgentsStuck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentsStuck, agentid_),
  };
  AgentsStuck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AgentsStuck_descriptor_,
      AgentsStuck::default_instance_,
      AgentsStuck_offsets_,
      -1,
      -1,
      -1,
      sizeof(AgentsStuck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentsStuck, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentsStuck, _is_default_instance_));
  AgentsStuckConfirmed_descriptor_ = file->message_type(17);
  static const int AgentsStuckConfirmed_offsets_[1] = {
  };
  AgentsStuckConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AgentsStuckConfirmed_descriptor_,
      AgentsStuckConfirmed::default_instance_,
      AgentsStuckConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(AgentsStuckConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentsStuckConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentsStuckConfirmed, _is_default_instance_));
  ExternalConnect_descriptor_ = file->message_type(18);
  static const int ExternalConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConnect, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConnect, port_),
  };
  ExternalConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternalConnect_descriptor_,
      ExternalConnect::default_instance_,
      ExternalConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternalConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConnect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConnect, _is_default_instance_));
  ExternalConnectConfirmed_descriptor_ = file->message_type(19);
  static const int ExternalConnectConfirmed_offsets_[1] = {
  };
  ExternalConnectConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExternalConnectConfirmed_descriptor_,
      ExternalConnectConfirmed::default_instance_,
      ExternalConnectConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(ExternalConnectConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConnectConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExternalConnectConfirmed, _is_default_instance_));
  MaximumNumberOfAgents_descriptor_ = file->message_type(20);
  static const int MaximumNumberOfAgents_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximumNumberOfAgents, number_),
  };
  MaximumNumberOfAgents_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MaximumNumberOfAgents_descriptor_,
      MaximumNumberOfAgents::default_instance_,
      MaximumNumberOfAgents_offsets_,
      -1,
      -1,
      -1,
      sizeof(MaximumNumberOfAgents),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximumNumberOfAgents, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximumNumberOfAgents, _is_default_instance_));
  MaximumNumberOfAgentsConfirmed_descriptor_ = file->message_type(21);
  static const int MaximumNumberOfAgentsConfirmed_offsets_[1] = {
  };
  MaximumNumberOfAgentsConfirmed_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MaximumNumberOfAgentsConfirmed_descriptor_,
      MaximumNumberOfAgentsConfirmed::default_instance_,
      MaximumNumberOfAgentsConfirmed_offsets_,
      -1,
      -1,
      -1,
      sizeof(MaximumNumberOfAgentsConfirmed),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximumNumberOfAgentsConfirmed, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaximumNumberOfAgentsConfirmed, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MATSimInterface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MATSim2ExternPutAgent_descriptor_, &MATSim2ExternPutAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MATSim2ExternPutAgent_Agent_descriptor_, &MATSim2ExternPutAgent_Agent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MATSim2ExternHasSpace_descriptor_, &MATSim2ExternHasSpace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MATSim2ExternHasSpaceConfirmed_descriptor_, &MATSim2ExternHasSpaceConfirmed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MATSim2ExternPutAgentConfirmed_descriptor_, &MATSim2ExternPutAgentConfirmed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Extern2MATSim_descriptor_, &Extern2MATSim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Extern2MATSim_Agent_descriptor_, &Extern2MATSim_Agent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Extern2MATSimTrajectories_descriptor_, &Extern2MATSimTrajectories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Extern2MATSimTrajectories_Agent_descriptor_, &Extern2MATSimTrajectories_Agent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MATSim2ExternTrajectoriesReceived_descriptor_, &MATSim2ExternTrajectoriesReceived::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Extern2MATSimConfirmed_descriptor_, &Extern2MATSimConfirmed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternSimStepFinished_descriptor_, &ExternSimStepFinished::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternSimStepFinishedReceived_descriptor_, &ExternSimStepFinishedReceived::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternDoSimStep_descriptor_, &ExternDoSimStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternDoSimStepReceived_descriptor_, &ExternDoSimStepReceived::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternOnPrepareSim_descriptor_, &ExternOnPrepareSim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternOnPrepareSimConfirmed_descriptor_, &ExternOnPrepareSimConfirmed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternAfterSim_descriptor_, &ExternAfterSim::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternAfterSimConfirmed_descriptor_, &ExternAfterSimConfirmed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AgentsStuck_descriptor_, &AgentsStuck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AgentsStuckConfirmed_descriptor_, &AgentsStuckConfirmed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternalConnect_descriptor_, &ExternalConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExternalConnectConfirmed_descriptor_, &ExternalConnectConfirmed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MaximumNumberOfAgents_descriptor_, &MaximumNumberOfAgents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MaximumNumberOfAgentsConfirmed_descriptor_, &MaximumNumberOfAgentsConfirmed::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MATSimInterface_2eproto() {
  delete MATSim2ExternPutAgent::default_instance_;
  delete MATSim2ExternPutAgent_reflection_;
  delete MATSim2ExternPutAgent_Agent::default_instance_;
  delete MATSim2ExternPutAgent_Agent_reflection_;
  delete MATSim2ExternHasSpace::default_instance_;
  delete MATSim2ExternHasSpace_reflection_;
  delete MATSim2ExternHasSpaceConfirmed::default_instance_;
  delete MATSim2ExternHasSpaceConfirmed_reflection_;
  delete MATSim2ExternPutAgentConfirmed::default_instance_;
  delete MATSim2ExternPutAgentConfirmed_reflection_;
  delete Extern2MATSim::default_instance_;
  delete Extern2MATSim_reflection_;
  delete Extern2MATSim_Agent::default_instance_;
  delete Extern2MATSim_Agent_reflection_;
  delete Extern2MATSimTrajectories::default_instance_;
  delete Extern2MATSimTrajectories_reflection_;
  delete Extern2MATSimTrajectories_Agent::default_instance_;
  delete Extern2MATSimTrajectories_Agent_reflection_;
  delete MATSim2ExternTrajectoriesReceived::default_instance_;
  delete MATSim2ExternTrajectoriesReceived_reflection_;
  delete Extern2MATSimConfirmed::default_instance_;
  delete Extern2MATSimConfirmed_reflection_;
  delete ExternSimStepFinished::default_instance_;
  delete ExternSimStepFinished_reflection_;
  delete ExternSimStepFinishedReceived::default_instance_;
  delete ExternSimStepFinishedReceived_reflection_;
  delete ExternDoSimStep::default_instance_;
  delete ExternDoSimStep_reflection_;
  delete ExternDoSimStepReceived::default_instance_;
  delete ExternDoSimStepReceived_reflection_;
  delete ExternOnPrepareSim::default_instance_;
  delete ExternOnPrepareSim_reflection_;
  delete ExternOnPrepareSimConfirmed::default_instance_;
  delete ExternOnPrepareSimConfirmed_reflection_;
  delete ExternAfterSim::default_instance_;
  delete ExternAfterSim_reflection_;
  delete ExternAfterSimConfirmed::default_instance_;
  delete ExternAfterSimConfirmed_reflection_;
  delete AgentsStuck::default_instance_;
  delete AgentsStuck_reflection_;
  delete AgentsStuckConfirmed::default_instance_;
  delete AgentsStuckConfirmed_reflection_;
  delete ExternalConnect::default_instance_;
  delete ExternalConnect_reflection_;
  delete ExternalConnectConfirmed::default_instance_;
  delete ExternalConnectConfirmed_reflection_;
  delete MaximumNumberOfAgents::default_instance_;
  delete MaximumNumberOfAgents_reflection_;
  delete MaximumNumberOfAgentsConfirmed::default_instance_;
  delete MaximumNumberOfAgentsConfirmed_reflection_;
}

void protobuf_AddDesc_MATSimInterface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025MATSimInterface.proto\022\021org.matsim.hybr"
    "id\"\215\001\n\025MATSim2ExternPutAgent\022=\n\005agent\030\001 "
    "\001(\0132..org.matsim.hybrid.MATSim2ExternPut"
    "Agent.Agent\0325\n\005Agent\022\n\n\002id\030\001 \001(\t\022\021\n\tente"
    "rNode\030\002 \001(\t\022\r\n\005nodes\030\003 \003(\t\"\'\n\025MATSim2Ext"
    "ernHasSpace\022\016\n\006nodeId\030\001 \001(\t\"2\n\036MATSim2Ex"
    "ternHasSpaceConfirmed\022\020\n\010hasSpace\030\001 \001(\010\""
    " \n\036MATSim2ExternPutAgentConfirmed\"n\n\rExt"
    "ern2MATSim\0225\n\005agent\030\001 \001(\0132&.org.matsim.h"
    "ybrid.Extern2MATSim.Agent\032&\n\005Agent\022\n\n\002id"
    "\030\001 \001(\t\022\021\n\tleaveNode\030\002 \001(\t\"\300\001\n\031Extern2MAT"
    "SimTrajectories\022\014\n\004time\030\001 \001(\001\022A\n\005agent\030\002"
    " \003(\01322.org.matsim.hybrid.Extern2MATSimTr"
    "ajectories.Agent\032R\n\005Agent\022\n\n\002id\030\001 \001(\005\022\t\n"
    "\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\t\n\001z\030\004 \001(\001\022\r\n\005color\030"
    "\005 \001(\005\022\r\n\005angle\030\006 \001(\001\"#\n!MATSim2ExternTra"
    "jectoriesReceived\"*\n\026Extern2MATSimConfir"
    "med\022\020\n\010accepted\030\001 \001(\010\"%\n\025ExternSimStepFi"
    "nished\022\014\n\004time\030\001 \001(\001\"\037\n\035ExternSimStepFin"
    "ishedReceived\"3\n\017ExternDoSimStep\022\020\n\010from"
    "Time\030\001 \001(\001\022\016\n\006toTime\030\002 \001(\001\"\031\n\027ExternDoSi"
    "mStepReceived\"\024\n\022ExternOnPrepareSim\"\035\n\033E"
    "xternOnPrepareSimConfirmed\"\020\n\016ExternAfte"
    "rSim\"\031\n\027ExternAfterSimConfirmed\"\036\n\013Agent"
    "sStuck\022\017\n\007agentId\030\001 \003(\t\"\026\n\024AgentsStuckCo"
    "nfirmed\"-\n\017ExternalConnect\022\014\n\004host\030\001 \001(\t"
    "\022\014\n\004port\030\002 \001(\005\"\032\n\030ExternalConnectConfirm"
    "ed\"\'\n\025MaximumNumberOfAgents\022\016\n\006number\030\001 "
    "\001(\005\" \n\036MaximumNumberOfAgentsConfirmed2\246\005"
    "\n\026MATSimInterfaceService\022e\n\022reqExternalC"
    "onnect\022\".org.matsim.hybrid.ExternalConne"
    "ct\032+.org.matsim.hybrid.ExternalConnectCo"
    "nfirmed\022_\n\020reqExtern2MATSim\022 .org.matsim"
    ".hybrid.Extern2MATSim\032).org.matsim.hybri"
    "d.Extern2MATSimConfirmed\022X\n\rreqAgentStuc"
    "k\022\036.org.matsim.hybrid.AgentsStuck\032\'.org."
    "matsim.hybrid.AgentsStuckConfirmed\022v\n\030re"
    "qExternSimStepFinished\022(.org.matsim.hybr"
    "id.ExternSimStepFinished\0320.org.matsim.hy"
    "brid.ExternSimStepFinishedReceived\022w\n\030re"
    "qMaximumNumberOfAgents\0221.org.matsim.hybr"
    "id.MaximumNumberOfAgentsConfirmed\032(.org."
    "matsim.hybrid.MaximumNumberOfAgents\022y\n\023r"
    "eqSendTrajectories\022,.org.matsim.hybrid.E"
    "xtern2MATSimTrajectories\0324.org.matsim.hy"
    "brid.MATSim2ExternTrajectoriesReceived2\304"
    "\004\n\026ExternInterfaceService\022w\n\030reqMATSim2E"
    "xternHasSpace\022(.org.matsim.hybrid.MATSim"
    "2ExternHasSpace\0321.org.matsim.hybrid.MATS"
    "im2ExternHasSpaceConfirmed\022w\n\030reqMATSim2"
    "ExternPutAgent\022(.org.matsim.hybrid.MATSi"
    "m2ExternPutAgent\0321.org.matsim.hybrid.MAT"
    "Sim2ExternPutAgentConfirmed\022d\n\022reqExtern"
    "DoSimStep\022\".org.matsim.hybrid.ExternDoSi"
    "mStep\032*.org.matsim.hybrid.ExternDoSimSte"
    "pReceived\022n\n\025reqExternOnPrepareSim\022%.org"
    ".matsim.hybrid.ExternOnPrepareSim\032..org."
    "matsim.hybrid.ExternOnPrepareSimConfirme"
    "d\022b\n\021reqExternAfterSim\022!.org.matsim.hybr"
    "id.ExternAfterSim\032*.org.matsim.hybrid.Ex"
    "ternAfterSimConfirmedB)\n\021org.matsim.hybr"
    "idB\024ProtoMATSimInterfaceb\006proto3", 2472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MATSimInterface.proto", &protobuf_RegisterTypes);
  MATSim2ExternPutAgent::default_instance_ = new MATSim2ExternPutAgent();
  MATSim2ExternPutAgent_Agent::default_instance_ = new MATSim2ExternPutAgent_Agent();
  MATSim2ExternHasSpace::default_instance_ = new MATSim2ExternHasSpace();
  MATSim2ExternHasSpaceConfirmed::default_instance_ = new MATSim2ExternHasSpaceConfirmed();
  MATSim2ExternPutAgentConfirmed::default_instance_ = new MATSim2ExternPutAgentConfirmed();
  Extern2MATSim::default_instance_ = new Extern2MATSim();
  Extern2MATSim_Agent::default_instance_ = new Extern2MATSim_Agent();
  Extern2MATSimTrajectories::default_instance_ = new Extern2MATSimTrajectories();
  Extern2MATSimTrajectories_Agent::default_instance_ = new Extern2MATSimTrajectories_Agent();
  MATSim2ExternTrajectoriesReceived::default_instance_ = new MATSim2ExternTrajectoriesReceived();
  Extern2MATSimConfirmed::default_instance_ = new Extern2MATSimConfirmed();
  ExternSimStepFinished::default_instance_ = new ExternSimStepFinished();
  ExternSimStepFinishedReceived::default_instance_ = new ExternSimStepFinishedReceived();
  ExternDoSimStep::default_instance_ = new ExternDoSimStep();
  ExternDoSimStepReceived::default_instance_ = new ExternDoSimStepReceived();
  ExternOnPrepareSim::default_instance_ = new ExternOnPrepareSim();
  ExternOnPrepareSimConfirmed::default_instance_ = new ExternOnPrepareSimConfirmed();
  ExternAfterSim::default_instance_ = new ExternAfterSim();
  ExternAfterSimConfirmed::default_instance_ = new ExternAfterSimConfirmed();
  AgentsStuck::default_instance_ = new AgentsStuck();
  AgentsStuckConfirmed::default_instance_ = new AgentsStuckConfirmed();
  ExternalConnect::default_instance_ = new ExternalConnect();
  ExternalConnectConfirmed::default_instance_ = new ExternalConnectConfirmed();
  MaximumNumberOfAgents::default_instance_ = new MaximumNumberOfAgents();
  MaximumNumberOfAgentsConfirmed::default_instance_ = new MaximumNumberOfAgentsConfirmed();
  MATSim2ExternPutAgent::default_instance_->InitAsDefaultInstance();
  MATSim2ExternPutAgent_Agent::default_instance_->InitAsDefaultInstance();
  MATSim2ExternHasSpace::default_instance_->InitAsDefaultInstance();
  MATSim2ExternHasSpaceConfirmed::default_instance_->InitAsDefaultInstance();
  MATSim2ExternPutAgentConfirmed::default_instance_->InitAsDefaultInstance();
  Extern2MATSim::default_instance_->InitAsDefaultInstance();
  Extern2MATSim_Agent::default_instance_->InitAsDefaultInstance();
  Extern2MATSimTrajectories::default_instance_->InitAsDefaultInstance();
  Extern2MATSimTrajectories_Agent::default_instance_->InitAsDefaultInstance();
  MATSim2ExternTrajectoriesReceived::default_instance_->InitAsDefaultInstance();
  Extern2MATSimConfirmed::default_instance_->InitAsDefaultInstance();
  ExternSimStepFinished::default_instance_->InitAsDefaultInstance();
  ExternSimStepFinishedReceived::default_instance_->InitAsDefaultInstance();
  ExternDoSimStep::default_instance_->InitAsDefaultInstance();
  ExternDoSimStepReceived::default_instance_->InitAsDefaultInstance();
  ExternOnPrepareSim::default_instance_->InitAsDefaultInstance();
  ExternOnPrepareSimConfirmed::default_instance_->InitAsDefaultInstance();
  ExternAfterSim::default_instance_->InitAsDefaultInstance();
  ExternAfterSimConfirmed::default_instance_->InitAsDefaultInstance();
  AgentsStuck::default_instance_->InitAsDefaultInstance();
  AgentsStuckConfirmed::default_instance_->InitAsDefaultInstance();
  ExternalConnect::default_instance_->InitAsDefaultInstance();
  ExternalConnectConfirmed::default_instance_->InitAsDefaultInstance();
  MaximumNumberOfAgents::default_instance_->InitAsDefaultInstance();
  MaximumNumberOfAgentsConfirmed::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MATSimInterface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MATSimInterface_2eproto {
  StaticDescriptorInitializer_MATSimInterface_2eproto() {
    protobuf_AddDesc_MATSimInterface_2eproto();
  }
} static_descriptor_initializer_MATSimInterface_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int MATSim2ExternPutAgent_Agent::kIdFieldNumber;
const int MATSim2ExternPutAgent_Agent::kEnterNodeFieldNumber;
const int MATSim2ExternPutAgent_Agent::kNodesFieldNumber;
#endif  // !_MSC_VER

MATSim2ExternPutAgent_Agent::MATSim2ExternPutAgent_Agent()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
}

void MATSim2ExternPutAgent_Agent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MATSim2ExternPutAgent_Agent::MATSim2ExternPutAgent_Agent(const MATSim2ExternPutAgent_Agent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
}

void MATSim2ExternPutAgent_Agent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enternode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MATSim2ExternPutAgent_Agent::~MATSim2ExternPutAgent_Agent() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
  SharedDtor();
}

void MATSim2ExternPutAgent_Agent::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enternode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MATSim2ExternPutAgent_Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MATSim2ExternPutAgent_Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MATSim2ExternPutAgent_Agent_descriptor_;
}

const MATSim2ExternPutAgent_Agent& MATSim2ExternPutAgent_Agent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MATSim2ExternPutAgent_Agent* MATSim2ExternPutAgent_Agent::default_instance_ = NULL;

MATSim2ExternPutAgent_Agent* MATSim2ExternPutAgent_Agent::New(::google::protobuf::Arena* arena) const {
  MATSim2ExternPutAgent_Agent* n = new MATSim2ExternPutAgent_Agent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MATSim2ExternPutAgent_Agent::Clear() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enternode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nodes_.Clear();
}

bool MATSim2ExternPutAgent_Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_enterNode;
        break;
      }

      // optional string enterNode = 2;
      case 2: {
        if (tag == 18) {
         parse_enterNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enternode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->enternode().data(), this->enternode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        break;
      }

      // repeated string nodes = 3;
      case 3: {
        if (tag == 26) {
         parse_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_nodes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodes(this->nodes_size() - 1).data(),
            this->nodes(this->nodes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nodes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
  return false;
#undef DO_
}

void MATSim2ExternPutAgent_Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string enterNode = 2;
  if (this->enternode().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enternode().data(), this->enternode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->enternode(), output);
  }

  // repeated string nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->nodes(i).data(), this->nodes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
}

::google::protobuf::uint8* MATSim2ExternPutAgent_Agent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string enterNode = 2;
  if (this->enternode().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->enternode().data(), this->enternode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->enternode(), target);
  }

  // repeated string nodes = 3;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodes(i).data(), this->nodes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->nodes(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MATSim2ExternPutAgent.Agent)
  return target;
}

int MATSim2ExternPutAgent_Agent::ByteSize() const {
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string enterNode = 2;
  if (this->enternode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->enternode());
  }

  // repeated string nodes = 3;
  total_size += 1 * this->nodes_size();
  for (int i = 0; i < this->nodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->nodes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MATSim2ExternPutAgent_Agent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MATSim2ExternPutAgent_Agent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MATSim2ExternPutAgent_Agent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MATSim2ExternPutAgent_Agent::MergeFrom(const MATSim2ExternPutAgent_Agent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nodes_.MergeFrom(from.nodes_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.enternode().size() > 0) {

    enternode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.enternode_);
  }
}

void MATSim2ExternPutAgent_Agent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATSim2ExternPutAgent_Agent::CopyFrom(const MATSim2ExternPutAgent_Agent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATSim2ExternPutAgent_Agent::IsInitialized() const {

  return true;
}

void MATSim2ExternPutAgent_Agent::Swap(MATSim2ExternPutAgent_Agent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MATSim2ExternPutAgent_Agent::InternalSwap(MATSim2ExternPutAgent_Agent* other) {
  id_.Swap(&other->id_);
  enternode_.Swap(&other->enternode_);
  nodes_.UnsafeArenaSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MATSim2ExternPutAgent_Agent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MATSim2ExternPutAgent_Agent_descriptor_;
  metadata.reflection = MATSim2ExternPutAgent_Agent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MATSim2ExternPutAgent::kAgentFieldNumber;
#endif  // !_MSC_VER

MATSim2ExternPutAgent::MATSim2ExternPutAgent()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MATSim2ExternPutAgent)
}

void MATSim2ExternPutAgent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  agent_ = const_cast< ::org::matsim::hybrid::MATSim2ExternPutAgent_Agent*>(&::org::matsim::hybrid::MATSim2ExternPutAgent_Agent::default_instance());
}

MATSim2ExternPutAgent::MATSim2ExternPutAgent(const MATSim2ExternPutAgent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MATSim2ExternPutAgent)
}

void MATSim2ExternPutAgent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  agent_ = NULL;
}

MATSim2ExternPutAgent::~MATSim2ExternPutAgent() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MATSim2ExternPutAgent)
  SharedDtor();
}

void MATSim2ExternPutAgent::SharedDtor() {
  if (this != default_instance_) {
    delete agent_;
  }
}

void MATSim2ExternPutAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MATSim2ExternPutAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MATSim2ExternPutAgent_descriptor_;
}

const MATSim2ExternPutAgent& MATSim2ExternPutAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MATSim2ExternPutAgent* MATSim2ExternPutAgent::default_instance_ = NULL;

MATSim2ExternPutAgent* MATSim2ExternPutAgent::New(::google::protobuf::Arena* arena) const {
  MATSim2ExternPutAgent* n = new MATSim2ExternPutAgent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MATSim2ExternPutAgent::Clear() {
  if (agent_ != NULL) delete agent_;
  agent_ = NULL;
}

bool MATSim2ExternPutAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MATSim2ExternPutAgent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.matsim.hybrid.MATSim2ExternPutAgent.Agent agent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MATSim2ExternPutAgent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MATSim2ExternPutAgent)
  return false;
#undef DO_
}

void MATSim2ExternPutAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MATSim2ExternPutAgent)
  // optional .org.matsim.hybrid.MATSim2ExternPutAgent.Agent agent = 1;
  if (this->has_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->agent_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MATSim2ExternPutAgent)
}

::google::protobuf::uint8* MATSim2ExternPutAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MATSim2ExternPutAgent)
  // optional .org.matsim.hybrid.MATSim2ExternPutAgent.Agent agent = 1;
  if (this->has_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->agent_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MATSim2ExternPutAgent)
  return target;
}

int MATSim2ExternPutAgent::ByteSize() const {
  int total_size = 0;

  // optional .org.matsim.hybrid.MATSim2ExternPutAgent.Agent agent = 1;
  if (this->has_agent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->agent_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MATSim2ExternPutAgent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MATSim2ExternPutAgent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MATSim2ExternPutAgent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MATSim2ExternPutAgent::MergeFrom(const MATSim2ExternPutAgent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_agent()) {
    mutable_agent()->::org::matsim::hybrid::MATSim2ExternPutAgent_Agent::MergeFrom(from.agent());
  }
}

void MATSim2ExternPutAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATSim2ExternPutAgent::CopyFrom(const MATSim2ExternPutAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATSim2ExternPutAgent::IsInitialized() const {

  return true;
}

void MATSim2ExternPutAgent::Swap(MATSim2ExternPutAgent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MATSim2ExternPutAgent::InternalSwap(MATSim2ExternPutAgent* other) {
  std::swap(agent_, other->agent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MATSim2ExternPutAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MATSim2ExternPutAgent_descriptor_;
  metadata.reflection = MATSim2ExternPutAgent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MATSim2ExternPutAgent_Agent

// optional string id = 1;
 void MATSim2ExternPutAgent_Agent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MATSim2ExternPutAgent_Agent::id() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MATSim2ExternPutAgent_Agent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id)
}
 void MATSim2ExternPutAgent_Agent::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id)
}
 void MATSim2ExternPutAgent_Agent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id)
}
 ::std::string* MATSim2ExternPutAgent_Agent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MATSim2ExternPutAgent_Agent::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MATSim2ExternPutAgent_Agent::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.id)
}

// optional string enterNode = 2;
 void MATSim2ExternPutAgent_Agent::clear_enternode() {
  enternode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MATSim2ExternPutAgent_Agent::enternode() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode)
  return enternode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MATSim2ExternPutAgent_Agent::set_enternode(const ::std::string& value) {
  
  enternode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode)
}
 void MATSim2ExternPutAgent_Agent::set_enternode(const char* value) {
  
  enternode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode)
}
 void MATSim2ExternPutAgent_Agent::set_enternode(const char* value, size_t size) {
  
  enternode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode)
}
 ::std::string* MATSim2ExternPutAgent_Agent::mutable_enternode() {
  
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode)
  return enternode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MATSim2ExternPutAgent_Agent::release_enternode() {
  
  return enternode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MATSim2ExternPutAgent_Agent::set_allocated_enternode(::std::string* enternode) {
  if (enternode != NULL) {
    
  } else {
    
  }
  enternode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enternode);
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.enterNode)
}

// repeated string nodes = 3;
 int MATSim2ExternPutAgent_Agent::nodes_size() const {
  return nodes_.size();
}
 void MATSim2ExternPutAgent_Agent::clear_nodes() {
  nodes_.Clear();
}
 const ::std::string& MATSim2ExternPutAgent_Agent::nodes(int index) const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
  return nodes_.Get(index);
}
 ::std::string* MATSim2ExternPutAgent_Agent::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
  return nodes_.Mutable(index);
}
 void MATSim2ExternPutAgent_Agent::set_nodes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
  nodes_.Mutable(index)->assign(value);
}
 void MATSim2ExternPutAgent_Agent::set_nodes(int index, const char* value) {
  nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
}
 void MATSim2ExternPutAgent_Agent::set_nodes(int index, const char* value, size_t size) {
  nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
}
 ::std::string* MATSim2ExternPutAgent_Agent::add_nodes() {
  return nodes_.Add();
}
 void MATSim2ExternPutAgent_Agent::add_nodes(const ::std::string& value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
}
 void MATSim2ExternPutAgent_Agent::add_nodes(const char* value) {
  nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
}
 void MATSim2ExternPutAgent_Agent::add_nodes(const char* value, size_t size) {
  nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MATSim2ExternPutAgent_Agent::nodes() const {
  // @@protoc_insertion_point(field_list:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
  return nodes_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MATSim2ExternPutAgent_Agent::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:org.matsim.hybrid.MATSim2ExternPutAgent.Agent.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// MATSim2ExternPutAgent

// optional .org.matsim.hybrid.MATSim2ExternPutAgent.Agent agent = 1;
 bool MATSim2ExternPutAgent::has_agent() const {
  return !_is_default_instance_ && agent_ != NULL;
}
 void MATSim2ExternPutAgent::clear_agent() {
  if (agent_ != NULL) delete agent_;
  agent_ = NULL;
}
 const ::org::matsim::hybrid::MATSim2ExternPutAgent_Agent& MATSim2ExternPutAgent::agent() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.MATSim2ExternPutAgent.agent)
  return agent_ != NULL ? *agent_ : *default_instance_->agent_;
}
 ::org::matsim::hybrid::MATSim2ExternPutAgent_Agent* MATSim2ExternPutAgent::mutable_agent() {
  
  if (agent_ == NULL) {
    agent_ = new ::org::matsim::hybrid::MATSim2ExternPutAgent_Agent;
  }
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.MATSim2ExternPutAgent.agent)
  return agent_;
}
 ::org::matsim::hybrid::MATSim2ExternPutAgent_Agent* MATSim2ExternPutAgent::release_agent() {
  
  ::org::matsim::hybrid::MATSim2ExternPutAgent_Agent* temp = agent_;
  agent_ = NULL;
  return temp;
}
 void MATSim2ExternPutAgent::set_allocated_agent(::org::matsim::hybrid::MATSim2ExternPutAgent_Agent* agent) {
  delete agent_;
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.MATSim2ExternPutAgent.agent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MATSim2ExternHasSpace::kNodeIdFieldNumber;
#endif  // !_MSC_VER

MATSim2ExternHasSpace::MATSim2ExternHasSpace()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MATSim2ExternHasSpace)
}

void MATSim2ExternHasSpace::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MATSim2ExternHasSpace::MATSim2ExternHasSpace(const MATSim2ExternHasSpace& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MATSim2ExternHasSpace)
}

void MATSim2ExternHasSpace::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MATSim2ExternHasSpace::~MATSim2ExternHasSpace() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MATSim2ExternHasSpace)
  SharedDtor();
}

void MATSim2ExternHasSpace::SharedDtor() {
  nodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MATSim2ExternHasSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MATSim2ExternHasSpace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MATSim2ExternHasSpace_descriptor_;
}

const MATSim2ExternHasSpace& MATSim2ExternHasSpace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MATSim2ExternHasSpace* MATSim2ExternHasSpace::default_instance_ = NULL;

MATSim2ExternHasSpace* MATSim2ExternHasSpace::New(::google::protobuf::Arena* arena) const {
  MATSim2ExternHasSpace* n = new MATSim2ExternHasSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MATSim2ExternHasSpace::Clear() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MATSim2ExternHasSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MATSim2ExternHasSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nodeId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nodeid().data(), this->nodeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.MATSim2ExternHasSpace.nodeId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MATSim2ExternHasSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MATSim2ExternHasSpace)
  return false;
#undef DO_
}

void MATSim2ExternHasSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MATSim2ExternHasSpace)
  // optional string nodeId = 1;
  if (this->nodeid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.MATSim2ExternHasSpace.nodeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MATSim2ExternHasSpace)
}

::google::protobuf::uint8* MATSim2ExternHasSpace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MATSim2ExternHasSpace)
  // optional string nodeId = 1;
  if (this->nodeid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nodeid().data(), this->nodeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.MATSim2ExternHasSpace.nodeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MATSim2ExternHasSpace)
  return target;
}

int MATSim2ExternHasSpace::ByteSize() const {
  int total_size = 0;

  // optional string nodeId = 1;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nodeid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MATSim2ExternHasSpace::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MATSim2ExternHasSpace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MATSim2ExternHasSpace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MATSim2ExternHasSpace::MergeFrom(const MATSim2ExternHasSpace& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.nodeid().size() > 0) {

    nodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
}

void MATSim2ExternHasSpace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATSim2ExternHasSpace::CopyFrom(const MATSim2ExternHasSpace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATSim2ExternHasSpace::IsInitialized() const {

  return true;
}

void MATSim2ExternHasSpace::Swap(MATSim2ExternHasSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MATSim2ExternHasSpace::InternalSwap(MATSim2ExternHasSpace* other) {
  nodeid_.Swap(&other->nodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MATSim2ExternHasSpace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MATSim2ExternHasSpace_descriptor_;
  metadata.reflection = MATSim2ExternHasSpace_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MATSim2ExternHasSpace

// optional string nodeId = 1;
 void MATSim2ExternHasSpace::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MATSim2ExternHasSpace::nodeid() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.MATSim2ExternHasSpace.nodeId)
  return nodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MATSim2ExternHasSpace::set_nodeid(const ::std::string& value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.MATSim2ExternHasSpace.nodeId)
}
 void MATSim2ExternHasSpace::set_nodeid(const char* value) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.MATSim2ExternHasSpace.nodeId)
}
 void MATSim2ExternHasSpace::set_nodeid(const char* value, size_t size) {
  
  nodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.MATSim2ExternHasSpace.nodeId)
}
 ::std::string* MATSim2ExternHasSpace::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.MATSim2ExternHasSpace.nodeId)
  return nodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MATSim2ExternHasSpace::release_nodeid() {
  
  return nodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MATSim2ExternHasSpace::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid != NULL) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.MATSim2ExternHasSpace.nodeId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MATSim2ExternHasSpaceConfirmed::kHasSpaceFieldNumber;
#endif  // !_MSC_VER

MATSim2ExternHasSpaceConfirmed::MATSim2ExternHasSpaceConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
}

void MATSim2ExternHasSpaceConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MATSim2ExternHasSpaceConfirmed::MATSim2ExternHasSpaceConfirmed(const MATSim2ExternHasSpaceConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
}

void MATSim2ExternHasSpaceConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  hasspace_ = false;
}

MATSim2ExternHasSpaceConfirmed::~MATSim2ExternHasSpaceConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
  SharedDtor();
}

void MATSim2ExternHasSpaceConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MATSim2ExternHasSpaceConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MATSim2ExternHasSpaceConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MATSim2ExternHasSpaceConfirmed_descriptor_;
}

const MATSim2ExternHasSpaceConfirmed& MATSim2ExternHasSpaceConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MATSim2ExternHasSpaceConfirmed* MATSim2ExternHasSpaceConfirmed::default_instance_ = NULL;

MATSim2ExternHasSpaceConfirmed* MATSim2ExternHasSpaceConfirmed::New(::google::protobuf::Arena* arena) const {
  MATSim2ExternHasSpaceConfirmed* n = new MATSim2ExternHasSpaceConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MATSim2ExternHasSpaceConfirmed::Clear() {
  hasspace_ = false;
}

bool MATSim2ExternHasSpaceConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasSpace = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasspace_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
  return false;
#undef DO_
}

void MATSim2ExternHasSpaceConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
  // optional bool hasSpace = 1;
  if (this->hasspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasspace(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
}

::google::protobuf::uint8* MATSim2ExternHasSpaceConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
  // optional bool hasSpace = 1;
  if (this->hasspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasspace(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed)
  return target;
}

int MATSim2ExternHasSpaceConfirmed::ByteSize() const {
  int total_size = 0;

  // optional bool hasSpace = 1;
  if (this->hasspace() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MATSim2ExternHasSpaceConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MATSim2ExternHasSpaceConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MATSim2ExternHasSpaceConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MATSim2ExternHasSpaceConfirmed::MergeFrom(const MATSim2ExternHasSpaceConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.hasspace() != 0) {
    set_hasspace(from.hasspace());
  }
}

void MATSim2ExternHasSpaceConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATSim2ExternHasSpaceConfirmed::CopyFrom(const MATSim2ExternHasSpaceConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATSim2ExternHasSpaceConfirmed::IsInitialized() const {

  return true;
}

void MATSim2ExternHasSpaceConfirmed::Swap(MATSim2ExternHasSpaceConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MATSim2ExternHasSpaceConfirmed::InternalSwap(MATSim2ExternHasSpaceConfirmed* other) {
  std::swap(hasspace_, other->hasspace_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MATSim2ExternHasSpaceConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MATSim2ExternHasSpaceConfirmed_descriptor_;
  metadata.reflection = MATSim2ExternHasSpaceConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MATSim2ExternHasSpaceConfirmed

// optional bool hasSpace = 1;
 void MATSim2ExternHasSpaceConfirmed::clear_hasspace() {
  hasspace_ = false;
}
 bool MATSim2ExternHasSpaceConfirmed::hasspace() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed.hasSpace)
  return hasspace_;
}
 void MATSim2ExternHasSpaceConfirmed::set_hasspace(bool value) {
  
  hasspace_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.MATSim2ExternHasSpaceConfirmed.hasSpace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MATSim2ExternPutAgentConfirmed::MATSim2ExternPutAgentConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
}

void MATSim2ExternPutAgentConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MATSim2ExternPutAgentConfirmed::MATSim2ExternPutAgentConfirmed(const MATSim2ExternPutAgentConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
}

void MATSim2ExternPutAgentConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MATSim2ExternPutAgentConfirmed::~MATSim2ExternPutAgentConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
  SharedDtor();
}

void MATSim2ExternPutAgentConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MATSim2ExternPutAgentConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MATSim2ExternPutAgentConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MATSim2ExternPutAgentConfirmed_descriptor_;
}

const MATSim2ExternPutAgentConfirmed& MATSim2ExternPutAgentConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MATSim2ExternPutAgentConfirmed* MATSim2ExternPutAgentConfirmed::default_instance_ = NULL;

MATSim2ExternPutAgentConfirmed* MATSim2ExternPutAgentConfirmed::New(::google::protobuf::Arena* arena) const {
  MATSim2ExternPutAgentConfirmed* n = new MATSim2ExternPutAgentConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MATSim2ExternPutAgentConfirmed::Clear() {
}

bool MATSim2ExternPutAgentConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
  return false;
#undef DO_
}

void MATSim2ExternPutAgentConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
}

::google::protobuf::uint8* MATSim2ExternPutAgentConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MATSim2ExternPutAgentConfirmed)
  return target;
}

int MATSim2ExternPutAgentConfirmed::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MATSim2ExternPutAgentConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MATSim2ExternPutAgentConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MATSim2ExternPutAgentConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MATSim2ExternPutAgentConfirmed::MergeFrom(const MATSim2ExternPutAgentConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void MATSim2ExternPutAgentConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATSim2ExternPutAgentConfirmed::CopyFrom(const MATSim2ExternPutAgentConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATSim2ExternPutAgentConfirmed::IsInitialized() const {

  return true;
}

void MATSim2ExternPutAgentConfirmed::Swap(MATSim2ExternPutAgentConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MATSim2ExternPutAgentConfirmed::InternalSwap(MATSim2ExternPutAgentConfirmed* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MATSim2ExternPutAgentConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MATSim2ExternPutAgentConfirmed_descriptor_;
  metadata.reflection = MATSim2ExternPutAgentConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MATSim2ExternPutAgentConfirmed

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Extern2MATSim_Agent::kIdFieldNumber;
const int Extern2MATSim_Agent::kLeaveNodeFieldNumber;
#endif  // !_MSC_VER

Extern2MATSim_Agent::Extern2MATSim_Agent()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.Extern2MATSim.Agent)
}

void Extern2MATSim_Agent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Extern2MATSim_Agent::Extern2MATSim_Agent(const Extern2MATSim_Agent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.Extern2MATSim.Agent)
}

void Extern2MATSim_Agent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavenode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Extern2MATSim_Agent::~Extern2MATSim_Agent() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.Extern2MATSim.Agent)
  SharedDtor();
}

void Extern2MATSim_Agent::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavenode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Extern2MATSim_Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extern2MATSim_Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extern2MATSim_Agent_descriptor_;
}

const Extern2MATSim_Agent& Extern2MATSim_Agent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

Extern2MATSim_Agent* Extern2MATSim_Agent::default_instance_ = NULL;

Extern2MATSim_Agent* Extern2MATSim_Agent::New(::google::protobuf::Arena* arena) const {
  Extern2MATSim_Agent* n = new Extern2MATSim_Agent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extern2MATSim_Agent::Clear() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leavenode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Extern2MATSim_Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.Extern2MATSim.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.Extern2MATSim.Agent.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leaveNode;
        break;
      }

      // optional string leaveNode = 2;
      case 2: {
        if (tag == 18) {
         parse_leaveNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leavenode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leavenode().data(), this->leavenode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.Extern2MATSim.Agent.leaveNode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.Extern2MATSim.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.Extern2MATSim.Agent)
  return false;
#undef DO_
}

void Extern2MATSim_Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.Extern2MATSim.Agent)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.Extern2MATSim.Agent.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string leaveNode = 2;
  if (this->leavenode().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leavenode().data(), this->leavenode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.Extern2MATSim.Agent.leaveNode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leavenode(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.Extern2MATSim.Agent)
}

::google::protobuf::uint8* Extern2MATSim_Agent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.Extern2MATSim.Agent)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.Extern2MATSim.Agent.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string leaveNode = 2;
  if (this->leavenode().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leavenode().data(), this->leavenode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.Extern2MATSim.Agent.leaveNode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leavenode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.Extern2MATSim.Agent)
  return target;
}

int Extern2MATSim_Agent::ByteSize() const {
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string leaveNode = 2;
  if (this->leavenode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leavenode());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extern2MATSim_Agent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Extern2MATSim_Agent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extern2MATSim_Agent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extern2MATSim_Agent::MergeFrom(const Extern2MATSim_Agent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.leavenode().size() > 0) {

    leavenode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leavenode_);
  }
}

void Extern2MATSim_Agent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extern2MATSim_Agent::CopyFrom(const Extern2MATSim_Agent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extern2MATSim_Agent::IsInitialized() const {

  return true;
}

void Extern2MATSim_Agent::Swap(Extern2MATSim_Agent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extern2MATSim_Agent::InternalSwap(Extern2MATSim_Agent* other) {
  id_.Swap(&other->id_);
  leavenode_.Swap(&other->leavenode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extern2MATSim_Agent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extern2MATSim_Agent_descriptor_;
  metadata.reflection = Extern2MATSim_Agent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Extern2MATSim::kAgentFieldNumber;
#endif  // !_MSC_VER

Extern2MATSim::Extern2MATSim()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.Extern2MATSim)
}

void Extern2MATSim::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  agent_ = const_cast< ::org::matsim::hybrid::Extern2MATSim_Agent*>(&::org::matsim::hybrid::Extern2MATSim_Agent::default_instance());
}

Extern2MATSim::Extern2MATSim(const Extern2MATSim& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.Extern2MATSim)
}

void Extern2MATSim::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  agent_ = NULL;
}

Extern2MATSim::~Extern2MATSim() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.Extern2MATSim)
  SharedDtor();
}

void Extern2MATSim::SharedDtor() {
  if (this != default_instance_) {
    delete agent_;
  }
}

void Extern2MATSim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extern2MATSim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extern2MATSim_descriptor_;
}

const Extern2MATSim& Extern2MATSim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

Extern2MATSim* Extern2MATSim::default_instance_ = NULL;

Extern2MATSim* Extern2MATSim::New(::google::protobuf::Arena* arena) const {
  Extern2MATSim* n = new Extern2MATSim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extern2MATSim::Clear() {
  if (agent_ != NULL) delete agent_;
  agent_ = NULL;
}

bool Extern2MATSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.Extern2MATSim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .org.matsim.hybrid.Extern2MATSim.Agent agent = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.Extern2MATSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.Extern2MATSim)
  return false;
#undef DO_
}

void Extern2MATSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.Extern2MATSim)
  // optional .org.matsim.hybrid.Extern2MATSim.Agent agent = 1;
  if (this->has_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->agent_, output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.Extern2MATSim)
}

::google::protobuf::uint8* Extern2MATSim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.Extern2MATSim)
  // optional .org.matsim.hybrid.Extern2MATSim.Agent agent = 1;
  if (this->has_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->agent_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.Extern2MATSim)
  return target;
}

int Extern2MATSim::ByteSize() const {
  int total_size = 0;

  // optional .org.matsim.hybrid.Extern2MATSim.Agent agent = 1;
  if (this->has_agent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->agent_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extern2MATSim::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Extern2MATSim* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extern2MATSim*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extern2MATSim::MergeFrom(const Extern2MATSim& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_agent()) {
    mutable_agent()->::org::matsim::hybrid::Extern2MATSim_Agent::MergeFrom(from.agent());
  }
}

void Extern2MATSim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extern2MATSim::CopyFrom(const Extern2MATSim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extern2MATSim::IsInitialized() const {

  return true;
}

void Extern2MATSim::Swap(Extern2MATSim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extern2MATSim::InternalSwap(Extern2MATSim* other) {
  std::swap(agent_, other->agent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extern2MATSim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extern2MATSim_descriptor_;
  metadata.reflection = Extern2MATSim_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extern2MATSim_Agent

// optional string id = 1;
 void Extern2MATSim_Agent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Extern2MATSim_Agent::id() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSim.Agent.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Extern2MATSim_Agent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSim.Agent.id)
}
 void Extern2MATSim_Agent::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.Extern2MATSim.Agent.id)
}
 void Extern2MATSim_Agent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.Extern2MATSim.Agent.id)
}
 ::std::string* Extern2MATSim_Agent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.Extern2MATSim.Agent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Extern2MATSim_Agent::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Extern2MATSim_Agent::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.Extern2MATSim.Agent.id)
}

// optional string leaveNode = 2;
 void Extern2MATSim_Agent::clear_leavenode() {
  leavenode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Extern2MATSim_Agent::leavenode() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSim.Agent.leaveNode)
  return leavenode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Extern2MATSim_Agent::set_leavenode(const ::std::string& value) {
  
  leavenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSim.Agent.leaveNode)
}
 void Extern2MATSim_Agent::set_leavenode(const char* value) {
  
  leavenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.Extern2MATSim.Agent.leaveNode)
}
 void Extern2MATSim_Agent::set_leavenode(const char* value, size_t size) {
  
  leavenode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.Extern2MATSim.Agent.leaveNode)
}
 ::std::string* Extern2MATSim_Agent::mutable_leavenode() {
  
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.Extern2MATSim.Agent.leaveNode)
  return leavenode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Extern2MATSim_Agent::release_leavenode() {
  
  return leavenode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Extern2MATSim_Agent::set_allocated_leavenode(::std::string* leavenode) {
  if (leavenode != NULL) {
    
  } else {
    
  }
  leavenode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leavenode);
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.Extern2MATSim.Agent.leaveNode)
}

// -------------------------------------------------------------------

// Extern2MATSim

// optional .org.matsim.hybrid.Extern2MATSim.Agent agent = 1;
 bool Extern2MATSim::has_agent() const {
  return !_is_default_instance_ && agent_ != NULL;
}
 void Extern2MATSim::clear_agent() {
  if (agent_ != NULL) delete agent_;
  agent_ = NULL;
}
 const ::org::matsim::hybrid::Extern2MATSim_Agent& Extern2MATSim::agent() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSim.agent)
  return agent_ != NULL ? *agent_ : *default_instance_->agent_;
}
 ::org::matsim::hybrid::Extern2MATSim_Agent* Extern2MATSim::mutable_agent() {
  
  if (agent_ == NULL) {
    agent_ = new ::org::matsim::hybrid::Extern2MATSim_Agent;
  }
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.Extern2MATSim.agent)
  return agent_;
}
 ::org::matsim::hybrid::Extern2MATSim_Agent* Extern2MATSim::release_agent() {
  
  ::org::matsim::hybrid::Extern2MATSim_Agent* temp = agent_;
  agent_ = NULL;
  return temp;
}
 void Extern2MATSim::set_allocated_agent(::org::matsim::hybrid::Extern2MATSim_Agent* agent) {
  delete agent_;
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.Extern2MATSim.agent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Extern2MATSimTrajectories_Agent::kIdFieldNumber;
const int Extern2MATSimTrajectories_Agent::kXFieldNumber;
const int Extern2MATSimTrajectories_Agent::kYFieldNumber;
const int Extern2MATSimTrajectories_Agent::kZFieldNumber;
const int Extern2MATSimTrajectories_Agent::kColorFieldNumber;
const int Extern2MATSimTrajectories_Agent::kAngleFieldNumber;
#endif  // !_MSC_VER

Extern2MATSimTrajectories_Agent::Extern2MATSimTrajectories_Agent()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
}

void Extern2MATSimTrajectories_Agent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Extern2MATSimTrajectories_Agent::Extern2MATSimTrajectories_Agent(const Extern2MATSimTrajectories_Agent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
}

void Extern2MATSimTrajectories_Agent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  color_ = 0;
  angle_ = 0;
}

Extern2MATSimTrajectories_Agent::~Extern2MATSimTrajectories_Agent() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
  SharedDtor();
}

void Extern2MATSimTrajectories_Agent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Extern2MATSimTrajectories_Agent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extern2MATSimTrajectories_Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extern2MATSimTrajectories_Agent_descriptor_;
}

const Extern2MATSimTrajectories_Agent& Extern2MATSimTrajectories_Agent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

Extern2MATSimTrajectories_Agent* Extern2MATSimTrajectories_Agent::default_instance_ = NULL;

Extern2MATSimTrajectories_Agent* Extern2MATSimTrajectories_Agent::New(::google::protobuf::Arena* arena) const {
  Extern2MATSimTrajectories_Agent* n = new Extern2MATSimTrajectories_Agent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extern2MATSimTrajectories_Agent::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Extern2MATSimTrajectories_Agent*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, angle_);

#undef ZR_HELPER_
#undef ZR_

}

bool Extern2MATSimTrajectories_Agent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }

      // optional double x = 2;
      case 2: {
        if (tag == 17) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }

      // optional double y = 3;
      case 3: {
        if (tag == 25) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_z;
        break;
      }

      // optional double z = 4;
      case 4: {
        if (tag == 33) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }

      // optional int32 color = 5;
      case 5: {
        if (tag == 40) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_angle;
        break;
      }

      // optional double angle = 6;
      case 6: {
        if (tag == 49) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
  return false;
#undef DO_
}

void Extern2MATSimTrajectories_Agent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // optional double z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->z(), output);
  }

  // optional int32 color = 5;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }

  // optional double angle = 6;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
}

::google::protobuf::uint8* Extern2MATSimTrajectories_Agent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // optional double z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->z(), target);
  }

  // optional int32 color = 5;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }

  // optional double angle = 6;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->angle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.Extern2MATSimTrajectories.Agent)
  return target;
}

int Extern2MATSimTrajectories_Agent::ByteSize() const {
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 4;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 color = 5;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // optional double angle = 6;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extern2MATSimTrajectories_Agent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Extern2MATSimTrajectories_Agent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extern2MATSimTrajectories_Agent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extern2MATSimTrajectories_Agent::MergeFrom(const Extern2MATSimTrajectories_Agent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void Extern2MATSimTrajectories_Agent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extern2MATSimTrajectories_Agent::CopyFrom(const Extern2MATSimTrajectories_Agent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extern2MATSimTrajectories_Agent::IsInitialized() const {

  return true;
}

void Extern2MATSimTrajectories_Agent::Swap(Extern2MATSimTrajectories_Agent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extern2MATSimTrajectories_Agent::InternalSwap(Extern2MATSimTrajectories_Agent* other) {
  std::swap(id_, other->id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(color_, other->color_);
  std::swap(angle_, other->angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extern2MATSimTrajectories_Agent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extern2MATSimTrajectories_Agent_descriptor_;
  metadata.reflection = Extern2MATSimTrajectories_Agent_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Extern2MATSimTrajectories::kTimeFieldNumber;
const int Extern2MATSimTrajectories::kAgentFieldNumber;
#endif  // !_MSC_VER

Extern2MATSimTrajectories::Extern2MATSimTrajectories()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.Extern2MATSimTrajectories)
}

void Extern2MATSimTrajectories::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Extern2MATSimTrajectories::Extern2MATSimTrajectories(const Extern2MATSimTrajectories& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.Extern2MATSimTrajectories)
}

void Extern2MATSimTrajectories::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = 0;
}

Extern2MATSimTrajectories::~Extern2MATSimTrajectories() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.Extern2MATSimTrajectories)
  SharedDtor();
}

void Extern2MATSimTrajectories::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Extern2MATSimTrajectories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extern2MATSimTrajectories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extern2MATSimTrajectories_descriptor_;
}

const Extern2MATSimTrajectories& Extern2MATSimTrajectories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

Extern2MATSimTrajectories* Extern2MATSimTrajectories::default_instance_ = NULL;

Extern2MATSimTrajectories* Extern2MATSimTrajectories::New(::google::protobuf::Arena* arena) const {
  Extern2MATSimTrajectories* n = new Extern2MATSimTrajectories;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extern2MATSimTrajectories::Clear() {
  time_ = 0;
  agent_.Clear();
}

bool Extern2MATSimTrajectories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.Extern2MATSimTrajectories)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_agent;
        break;
      }

      // repeated .org.matsim.hybrid.Extern2MATSimTrajectories.Agent agent = 2;
      case 2: {
        if (tag == 18) {
         parse_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_agent;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.Extern2MATSimTrajectories)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.Extern2MATSimTrajectories)
  return false;
#undef DO_
}

void Extern2MATSimTrajectories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.Extern2MATSimTrajectories)
  // optional double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // repeated .org.matsim.hybrid.Extern2MATSimTrajectories.Agent agent = 2;
  for (unsigned int i = 0, n = this->agent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->agent(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.Extern2MATSimTrajectories)
}

::google::protobuf::uint8* Extern2MATSimTrajectories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.Extern2MATSimTrajectories)
  // optional double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // repeated .org.matsim.hybrid.Extern2MATSimTrajectories.Agent agent = 2;
  for (unsigned int i = 0, n = this->agent_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->agent(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.Extern2MATSimTrajectories)
  return target;
}

int Extern2MATSimTrajectories::ByteSize() const {
  int total_size = 0;

  // optional double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // repeated .org.matsim.hybrid.Extern2MATSimTrajectories.Agent agent = 2;
  total_size += 1 * this->agent_size();
  for (int i = 0; i < this->agent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agent(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extern2MATSimTrajectories::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Extern2MATSimTrajectories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extern2MATSimTrajectories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extern2MATSimTrajectories::MergeFrom(const Extern2MATSimTrajectories& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  agent_.MergeFrom(from.agent_);
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void Extern2MATSimTrajectories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extern2MATSimTrajectories::CopyFrom(const Extern2MATSimTrajectories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extern2MATSimTrajectories::IsInitialized() const {

  return true;
}

void Extern2MATSimTrajectories::Swap(Extern2MATSimTrajectories* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extern2MATSimTrajectories::InternalSwap(Extern2MATSimTrajectories* other) {
  std::swap(time_, other->time_);
  agent_.UnsafeArenaSwap(&other->agent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extern2MATSimTrajectories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extern2MATSimTrajectories_descriptor_;
  metadata.reflection = Extern2MATSimTrajectories_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extern2MATSimTrajectories_Agent

// optional int32 id = 1;
 void Extern2MATSimTrajectories_Agent::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Extern2MATSimTrajectories_Agent::id() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.id)
  return id_;
}
 void Extern2MATSimTrajectories_Agent::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.id)
}

// optional double x = 2;
 void Extern2MATSimTrajectories_Agent::clear_x() {
  x_ = 0;
}
 double Extern2MATSimTrajectories_Agent::x() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.x)
  return x_;
}
 void Extern2MATSimTrajectories_Agent::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.x)
}

// optional double y = 3;
 void Extern2MATSimTrajectories_Agent::clear_y() {
  y_ = 0;
}
 double Extern2MATSimTrajectories_Agent::y() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.y)
  return y_;
}
 void Extern2MATSimTrajectories_Agent::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.y)
}

// optional double z = 4;
 void Extern2MATSimTrajectories_Agent::clear_z() {
  z_ = 0;
}
 double Extern2MATSimTrajectories_Agent::z() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.z)
  return z_;
}
 void Extern2MATSimTrajectories_Agent::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.z)
}

// optional int32 color = 5;
 void Extern2MATSimTrajectories_Agent::clear_color() {
  color_ = 0;
}
 ::google::protobuf::int32 Extern2MATSimTrajectories_Agent::color() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.color)
  return color_;
}
 void Extern2MATSimTrajectories_Agent::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.color)
}

// optional double angle = 6;
 void Extern2MATSimTrajectories_Agent::clear_angle() {
  angle_ = 0;
}
 double Extern2MATSimTrajectories_Agent::angle() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.angle)
  return angle_;
}
 void Extern2MATSimTrajectories_Agent::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimTrajectories.Agent.angle)
}

// -------------------------------------------------------------------

// Extern2MATSimTrajectories

// optional double time = 1;
 void Extern2MATSimTrajectories::clear_time() {
  time_ = 0;
}
 double Extern2MATSimTrajectories::time() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.time)
  return time_;
}
 void Extern2MATSimTrajectories::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimTrajectories.time)
}

// repeated .org.matsim.hybrid.Extern2MATSimTrajectories.Agent agent = 2;
 int Extern2MATSimTrajectories::agent_size() const {
  return agent_.size();
}
 void Extern2MATSimTrajectories::clear_agent() {
  agent_.Clear();
}
 const ::org::matsim::hybrid::Extern2MATSimTrajectories_Agent& Extern2MATSimTrajectories::agent(int index) const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimTrajectories.agent)
  return agent_.Get(index);
}
 ::org::matsim::hybrid::Extern2MATSimTrajectories_Agent* Extern2MATSimTrajectories::mutable_agent(int index) {
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.Extern2MATSimTrajectories.agent)
  return agent_.Mutable(index);
}
 ::org::matsim::hybrid::Extern2MATSimTrajectories_Agent* Extern2MATSimTrajectories::add_agent() {
  // @@protoc_insertion_point(field_add:org.matsim.hybrid.Extern2MATSimTrajectories.agent)
  return agent_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::org::matsim::hybrid::Extern2MATSimTrajectories_Agent >&
Extern2MATSimTrajectories::agent() const {
  // @@protoc_insertion_point(field_list:org.matsim.hybrid.Extern2MATSimTrajectories.agent)
  return agent_;
}
 ::google::protobuf::RepeatedPtrField< ::org::matsim::hybrid::Extern2MATSimTrajectories_Agent >*
Extern2MATSimTrajectories::mutable_agent() {
  // @@protoc_insertion_point(field_mutable_list:org.matsim.hybrid.Extern2MATSimTrajectories.agent)
  return &agent_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MATSim2ExternTrajectoriesReceived::MATSim2ExternTrajectoriesReceived()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
}

void MATSim2ExternTrajectoriesReceived::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MATSim2ExternTrajectoriesReceived::MATSim2ExternTrajectoriesReceived(const MATSim2ExternTrajectoriesReceived& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
}

void MATSim2ExternTrajectoriesReceived::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MATSim2ExternTrajectoriesReceived::~MATSim2ExternTrajectoriesReceived() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
  SharedDtor();
}

void MATSim2ExternTrajectoriesReceived::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MATSim2ExternTrajectoriesReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MATSim2ExternTrajectoriesReceived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MATSim2ExternTrajectoriesReceived_descriptor_;
}

const MATSim2ExternTrajectoriesReceived& MATSim2ExternTrajectoriesReceived::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MATSim2ExternTrajectoriesReceived* MATSim2ExternTrajectoriesReceived::default_instance_ = NULL;

MATSim2ExternTrajectoriesReceived* MATSim2ExternTrajectoriesReceived::New(::google::protobuf::Arena* arena) const {
  MATSim2ExternTrajectoriesReceived* n = new MATSim2ExternTrajectoriesReceived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MATSim2ExternTrajectoriesReceived::Clear() {
}

bool MATSim2ExternTrajectoriesReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
  return false;
#undef DO_
}

void MATSim2ExternTrajectoriesReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
}

::google::protobuf::uint8* MATSim2ExternTrajectoriesReceived::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MATSim2ExternTrajectoriesReceived)
  return target;
}

int MATSim2ExternTrajectoriesReceived::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MATSim2ExternTrajectoriesReceived::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MATSim2ExternTrajectoriesReceived* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MATSim2ExternTrajectoriesReceived*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MATSim2ExternTrajectoriesReceived::MergeFrom(const MATSim2ExternTrajectoriesReceived& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void MATSim2ExternTrajectoriesReceived::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATSim2ExternTrajectoriesReceived::CopyFrom(const MATSim2ExternTrajectoriesReceived& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATSim2ExternTrajectoriesReceived::IsInitialized() const {

  return true;
}

void MATSim2ExternTrajectoriesReceived::Swap(MATSim2ExternTrajectoriesReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MATSim2ExternTrajectoriesReceived::InternalSwap(MATSim2ExternTrajectoriesReceived* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MATSim2ExternTrajectoriesReceived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MATSim2ExternTrajectoriesReceived_descriptor_;
  metadata.reflection = MATSim2ExternTrajectoriesReceived_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MATSim2ExternTrajectoriesReceived

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Extern2MATSimConfirmed::kAcceptedFieldNumber;
#endif  // !_MSC_VER

Extern2MATSimConfirmed::Extern2MATSimConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.Extern2MATSimConfirmed)
}

void Extern2MATSimConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Extern2MATSimConfirmed::Extern2MATSimConfirmed(const Extern2MATSimConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.Extern2MATSimConfirmed)
}

void Extern2MATSimConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  accepted_ = false;
}

Extern2MATSimConfirmed::~Extern2MATSimConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.Extern2MATSimConfirmed)
  SharedDtor();
}

void Extern2MATSimConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Extern2MATSimConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Extern2MATSimConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extern2MATSimConfirmed_descriptor_;
}

const Extern2MATSimConfirmed& Extern2MATSimConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

Extern2MATSimConfirmed* Extern2MATSimConfirmed::default_instance_ = NULL;

Extern2MATSimConfirmed* Extern2MATSimConfirmed::New(::google::protobuf::Arena* arena) const {
  Extern2MATSimConfirmed* n = new Extern2MATSimConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extern2MATSimConfirmed::Clear() {
  accepted_ = false;
}

bool Extern2MATSimConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.Extern2MATSimConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accepted = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accepted_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.Extern2MATSimConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.Extern2MATSimConfirmed)
  return false;
#undef DO_
}

void Extern2MATSimConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.Extern2MATSimConfirmed)
  // optional bool accepted = 1;
  if (this->accepted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accepted(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.Extern2MATSimConfirmed)
}

::google::protobuf::uint8* Extern2MATSimConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.Extern2MATSimConfirmed)
  // optional bool accepted = 1;
  if (this->accepted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accepted(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.Extern2MATSimConfirmed)
  return target;
}

int Extern2MATSimConfirmed::ByteSize() const {
  int total_size = 0;

  // optional bool accepted = 1;
  if (this->accepted() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extern2MATSimConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Extern2MATSimConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extern2MATSimConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extern2MATSimConfirmed::MergeFrom(const Extern2MATSimConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.accepted() != 0) {
    set_accepted(from.accepted());
  }
}

void Extern2MATSimConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extern2MATSimConfirmed::CopyFrom(const Extern2MATSimConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extern2MATSimConfirmed::IsInitialized() const {

  return true;
}

void Extern2MATSimConfirmed::Swap(Extern2MATSimConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extern2MATSimConfirmed::InternalSwap(Extern2MATSimConfirmed* other) {
  std::swap(accepted_, other->accepted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Extern2MATSimConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extern2MATSimConfirmed_descriptor_;
  metadata.reflection = Extern2MATSimConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extern2MATSimConfirmed

// optional bool accepted = 1;
 void Extern2MATSimConfirmed::clear_accepted() {
  accepted_ = false;
}
 bool Extern2MATSimConfirmed::accepted() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.Extern2MATSimConfirmed.accepted)
  return accepted_;
}
 void Extern2MATSimConfirmed::set_accepted(bool value) {
  
  accepted_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.Extern2MATSimConfirmed.accepted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ExternSimStepFinished::kTimeFieldNumber;
#endif  // !_MSC_VER

ExternSimStepFinished::ExternSimStepFinished()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternSimStepFinished)
}

void ExternSimStepFinished::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternSimStepFinished::ExternSimStepFinished(const ExternSimStepFinished& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternSimStepFinished)
}

void ExternSimStepFinished::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  time_ = 0;
}

ExternSimStepFinished::~ExternSimStepFinished() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternSimStepFinished)
  SharedDtor();
}

void ExternSimStepFinished::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternSimStepFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternSimStepFinished::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternSimStepFinished_descriptor_;
}

const ExternSimStepFinished& ExternSimStepFinished::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternSimStepFinished* ExternSimStepFinished::default_instance_ = NULL;

ExternSimStepFinished* ExternSimStepFinished::New(::google::protobuf::Arena* arena) const {
  ExternSimStepFinished* n = new ExternSimStepFinished;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternSimStepFinished::Clear() {
  time_ = 0;
}

bool ExternSimStepFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternSimStepFinished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternSimStepFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternSimStepFinished)
  return false;
#undef DO_
}

void ExternSimStepFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternSimStepFinished)
  // optional double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternSimStepFinished)
}

::google::protobuf::uint8* ExternSimStepFinished::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternSimStepFinished)
  // optional double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternSimStepFinished)
  return target;
}

int ExternSimStepFinished::ByteSize() const {
  int total_size = 0;

  // optional double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternSimStepFinished::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternSimStepFinished* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternSimStepFinished*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternSimStepFinished::MergeFrom(const ExternSimStepFinished& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void ExternSimStepFinished::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSimStepFinished::CopyFrom(const ExternSimStepFinished& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSimStepFinished::IsInitialized() const {

  return true;
}

void ExternSimStepFinished::Swap(ExternSimStepFinished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternSimStepFinished::InternalSwap(ExternSimStepFinished* other) {
  std::swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternSimStepFinished::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternSimStepFinished_descriptor_;
  metadata.reflection = ExternSimStepFinished_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternSimStepFinished

// optional double time = 1;
 void ExternSimStepFinished::clear_time() {
  time_ = 0;
}
 double ExternSimStepFinished::time() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.ExternSimStepFinished.time)
  return time_;
}
 void ExternSimStepFinished::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.ExternSimStepFinished.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExternSimStepFinishedReceived::ExternSimStepFinishedReceived()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternSimStepFinishedReceived)
}

void ExternSimStepFinishedReceived::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternSimStepFinishedReceived::ExternSimStepFinishedReceived(const ExternSimStepFinishedReceived& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternSimStepFinishedReceived)
}

void ExternSimStepFinishedReceived::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExternSimStepFinishedReceived::~ExternSimStepFinishedReceived() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternSimStepFinishedReceived)
  SharedDtor();
}

void ExternSimStepFinishedReceived::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternSimStepFinishedReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternSimStepFinishedReceived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternSimStepFinishedReceived_descriptor_;
}

const ExternSimStepFinishedReceived& ExternSimStepFinishedReceived::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternSimStepFinishedReceived* ExternSimStepFinishedReceived::default_instance_ = NULL;

ExternSimStepFinishedReceived* ExternSimStepFinishedReceived::New(::google::protobuf::Arena* arena) const {
  ExternSimStepFinishedReceived* n = new ExternSimStepFinishedReceived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternSimStepFinishedReceived::Clear() {
}

bool ExternSimStepFinishedReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternSimStepFinishedReceived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternSimStepFinishedReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternSimStepFinishedReceived)
  return false;
#undef DO_
}

void ExternSimStepFinishedReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternSimStepFinishedReceived)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternSimStepFinishedReceived)
}

::google::protobuf::uint8* ExternSimStepFinishedReceived::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternSimStepFinishedReceived)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternSimStepFinishedReceived)
  return target;
}

int ExternSimStepFinishedReceived::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternSimStepFinishedReceived::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternSimStepFinishedReceived* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternSimStepFinishedReceived*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternSimStepFinishedReceived::MergeFrom(const ExternSimStepFinishedReceived& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ExternSimStepFinishedReceived::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternSimStepFinishedReceived::CopyFrom(const ExternSimStepFinishedReceived& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternSimStepFinishedReceived::IsInitialized() const {

  return true;
}

void ExternSimStepFinishedReceived::Swap(ExternSimStepFinishedReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternSimStepFinishedReceived::InternalSwap(ExternSimStepFinishedReceived* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternSimStepFinishedReceived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternSimStepFinishedReceived_descriptor_;
  metadata.reflection = ExternSimStepFinishedReceived_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternSimStepFinishedReceived

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ExternDoSimStep::kFromTimeFieldNumber;
const int ExternDoSimStep::kToTimeFieldNumber;
#endif  // !_MSC_VER

ExternDoSimStep::ExternDoSimStep()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternDoSimStep)
}

void ExternDoSimStep::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternDoSimStep::ExternDoSimStep(const ExternDoSimStep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternDoSimStep)
}

void ExternDoSimStep::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  fromtime_ = 0;
  totime_ = 0;
}

ExternDoSimStep::~ExternDoSimStep() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternDoSimStep)
  SharedDtor();
}

void ExternDoSimStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternDoSimStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternDoSimStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternDoSimStep_descriptor_;
}

const ExternDoSimStep& ExternDoSimStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternDoSimStep* ExternDoSimStep::default_instance_ = NULL;

ExternDoSimStep* ExternDoSimStep::New(::google::protobuf::Arena* arena) const {
  ExternDoSimStep* n = new ExternDoSimStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternDoSimStep::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExternDoSimStep*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fromtime_, totime_);

#undef ZR_HELPER_
#undef ZR_

}

bool ExternDoSimStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternDoSimStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double fromTime = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fromtime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_toTime;
        break;
      }

      // optional double toTime = 2;
      case 2: {
        if (tag == 17) {
         parse_toTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternDoSimStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternDoSimStep)
  return false;
#undef DO_
}

void ExternDoSimStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternDoSimStep)
  // optional double fromTime = 1;
  if (this->fromtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->fromtime(), output);
  }

  // optional double toTime = 2;
  if (this->totime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->totime(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternDoSimStep)
}

::google::protobuf::uint8* ExternDoSimStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternDoSimStep)
  // optional double fromTime = 1;
  if (this->fromtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->fromtime(), target);
  }

  // optional double toTime = 2;
  if (this->totime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->totime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternDoSimStep)
  return target;
}

int ExternDoSimStep::ByteSize() const {
  int total_size = 0;

  // optional double fromTime = 1;
  if (this->fromtime() != 0) {
    total_size += 1 + 8;
  }

  // optional double toTime = 2;
  if (this->totime() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternDoSimStep::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternDoSimStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternDoSimStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternDoSimStep::MergeFrom(const ExternDoSimStep& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.fromtime() != 0) {
    set_fromtime(from.fromtime());
  }
  if (from.totime() != 0) {
    set_totime(from.totime());
  }
}

void ExternDoSimStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternDoSimStep::CopyFrom(const ExternDoSimStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternDoSimStep::IsInitialized() const {

  return true;
}

void ExternDoSimStep::Swap(ExternDoSimStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternDoSimStep::InternalSwap(ExternDoSimStep* other) {
  std::swap(fromtime_, other->fromtime_);
  std::swap(totime_, other->totime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternDoSimStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternDoSimStep_descriptor_;
  metadata.reflection = ExternDoSimStep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternDoSimStep

// optional double fromTime = 1;
 void ExternDoSimStep::clear_fromtime() {
  fromtime_ = 0;
}
 double ExternDoSimStep::fromtime() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.ExternDoSimStep.fromTime)
  return fromtime_;
}
 void ExternDoSimStep::set_fromtime(double value) {
  
  fromtime_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.ExternDoSimStep.fromTime)
}

// optional double toTime = 2;
 void ExternDoSimStep::clear_totime() {
  totime_ = 0;
}
 double ExternDoSimStep::totime() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.ExternDoSimStep.toTime)
  return totime_;
}
 void ExternDoSimStep::set_totime(double value) {
  
  totime_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.ExternDoSimStep.toTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExternDoSimStepReceived::ExternDoSimStepReceived()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternDoSimStepReceived)
}

void ExternDoSimStepReceived::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternDoSimStepReceived::ExternDoSimStepReceived(const ExternDoSimStepReceived& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternDoSimStepReceived)
}

void ExternDoSimStepReceived::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExternDoSimStepReceived::~ExternDoSimStepReceived() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternDoSimStepReceived)
  SharedDtor();
}

void ExternDoSimStepReceived::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternDoSimStepReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternDoSimStepReceived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternDoSimStepReceived_descriptor_;
}

const ExternDoSimStepReceived& ExternDoSimStepReceived::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternDoSimStepReceived* ExternDoSimStepReceived::default_instance_ = NULL;

ExternDoSimStepReceived* ExternDoSimStepReceived::New(::google::protobuf::Arena* arena) const {
  ExternDoSimStepReceived* n = new ExternDoSimStepReceived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternDoSimStepReceived::Clear() {
}

bool ExternDoSimStepReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternDoSimStepReceived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternDoSimStepReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternDoSimStepReceived)
  return false;
#undef DO_
}

void ExternDoSimStepReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternDoSimStepReceived)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternDoSimStepReceived)
}

::google::protobuf::uint8* ExternDoSimStepReceived::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternDoSimStepReceived)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternDoSimStepReceived)
  return target;
}

int ExternDoSimStepReceived::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternDoSimStepReceived::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternDoSimStepReceived* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternDoSimStepReceived*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternDoSimStepReceived::MergeFrom(const ExternDoSimStepReceived& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ExternDoSimStepReceived::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternDoSimStepReceived::CopyFrom(const ExternDoSimStepReceived& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternDoSimStepReceived::IsInitialized() const {

  return true;
}

void ExternDoSimStepReceived::Swap(ExternDoSimStepReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternDoSimStepReceived::InternalSwap(ExternDoSimStepReceived* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternDoSimStepReceived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternDoSimStepReceived_descriptor_;
  metadata.reflection = ExternDoSimStepReceived_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternDoSimStepReceived

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExternOnPrepareSim::ExternOnPrepareSim()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternOnPrepareSim)
}

void ExternOnPrepareSim::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternOnPrepareSim::ExternOnPrepareSim(const ExternOnPrepareSim& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternOnPrepareSim)
}

void ExternOnPrepareSim::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExternOnPrepareSim::~ExternOnPrepareSim() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternOnPrepareSim)
  SharedDtor();
}

void ExternOnPrepareSim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternOnPrepareSim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternOnPrepareSim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternOnPrepareSim_descriptor_;
}

const ExternOnPrepareSim& ExternOnPrepareSim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternOnPrepareSim* ExternOnPrepareSim::default_instance_ = NULL;

ExternOnPrepareSim* ExternOnPrepareSim::New(::google::protobuf::Arena* arena) const {
  ExternOnPrepareSim* n = new ExternOnPrepareSim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternOnPrepareSim::Clear() {
}

bool ExternOnPrepareSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternOnPrepareSim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternOnPrepareSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternOnPrepareSim)
  return false;
#undef DO_
}

void ExternOnPrepareSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternOnPrepareSim)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternOnPrepareSim)
}

::google::protobuf::uint8* ExternOnPrepareSim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternOnPrepareSim)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternOnPrepareSim)
  return target;
}

int ExternOnPrepareSim::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternOnPrepareSim::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternOnPrepareSim* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternOnPrepareSim*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternOnPrepareSim::MergeFrom(const ExternOnPrepareSim& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ExternOnPrepareSim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternOnPrepareSim::CopyFrom(const ExternOnPrepareSim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternOnPrepareSim::IsInitialized() const {

  return true;
}

void ExternOnPrepareSim::Swap(ExternOnPrepareSim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternOnPrepareSim::InternalSwap(ExternOnPrepareSim* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternOnPrepareSim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternOnPrepareSim_descriptor_;
  metadata.reflection = ExternOnPrepareSim_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternOnPrepareSim

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExternOnPrepareSimConfirmed::ExternOnPrepareSimConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
}

void ExternOnPrepareSimConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternOnPrepareSimConfirmed::ExternOnPrepareSimConfirmed(const ExternOnPrepareSimConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
}

void ExternOnPrepareSimConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExternOnPrepareSimConfirmed::~ExternOnPrepareSimConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
  SharedDtor();
}

void ExternOnPrepareSimConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternOnPrepareSimConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternOnPrepareSimConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternOnPrepareSimConfirmed_descriptor_;
}

const ExternOnPrepareSimConfirmed& ExternOnPrepareSimConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternOnPrepareSimConfirmed* ExternOnPrepareSimConfirmed::default_instance_ = NULL;

ExternOnPrepareSimConfirmed* ExternOnPrepareSimConfirmed::New(::google::protobuf::Arena* arena) const {
  ExternOnPrepareSimConfirmed* n = new ExternOnPrepareSimConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternOnPrepareSimConfirmed::Clear() {
}

bool ExternOnPrepareSimConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
  return false;
#undef DO_
}

void ExternOnPrepareSimConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
}

::google::protobuf::uint8* ExternOnPrepareSimConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternOnPrepareSimConfirmed)
  return target;
}

int ExternOnPrepareSimConfirmed::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternOnPrepareSimConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternOnPrepareSimConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternOnPrepareSimConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternOnPrepareSimConfirmed::MergeFrom(const ExternOnPrepareSimConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ExternOnPrepareSimConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternOnPrepareSimConfirmed::CopyFrom(const ExternOnPrepareSimConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternOnPrepareSimConfirmed::IsInitialized() const {

  return true;
}

void ExternOnPrepareSimConfirmed::Swap(ExternOnPrepareSimConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternOnPrepareSimConfirmed::InternalSwap(ExternOnPrepareSimConfirmed* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternOnPrepareSimConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternOnPrepareSimConfirmed_descriptor_;
  metadata.reflection = ExternOnPrepareSimConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternOnPrepareSimConfirmed

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExternAfterSim::ExternAfterSim()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternAfterSim)
}

void ExternAfterSim::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternAfterSim::ExternAfterSim(const ExternAfterSim& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternAfterSim)
}

void ExternAfterSim::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExternAfterSim::~ExternAfterSim() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternAfterSim)
  SharedDtor();
}

void ExternAfterSim::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternAfterSim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternAfterSim::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternAfterSim_descriptor_;
}

const ExternAfterSim& ExternAfterSim::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternAfterSim* ExternAfterSim::default_instance_ = NULL;

ExternAfterSim* ExternAfterSim::New(::google::protobuf::Arena* arena) const {
  ExternAfterSim* n = new ExternAfterSim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternAfterSim::Clear() {
}

bool ExternAfterSim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternAfterSim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternAfterSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternAfterSim)
  return false;
#undef DO_
}

void ExternAfterSim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternAfterSim)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternAfterSim)
}

::google::protobuf::uint8* ExternAfterSim::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternAfterSim)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternAfterSim)
  return target;
}

int ExternAfterSim::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternAfterSim::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternAfterSim* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternAfterSim*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternAfterSim::MergeFrom(const ExternAfterSim& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ExternAfterSim::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternAfterSim::CopyFrom(const ExternAfterSim& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternAfterSim::IsInitialized() const {

  return true;
}

void ExternAfterSim::Swap(ExternAfterSim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternAfterSim::InternalSwap(ExternAfterSim* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternAfterSim::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternAfterSim_descriptor_;
  metadata.reflection = ExternAfterSim_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternAfterSim

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExternAfterSimConfirmed::ExternAfterSimConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternAfterSimConfirmed)
}

void ExternAfterSimConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternAfterSimConfirmed::ExternAfterSimConfirmed(const ExternAfterSimConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternAfterSimConfirmed)
}

void ExternAfterSimConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExternAfterSimConfirmed::~ExternAfterSimConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternAfterSimConfirmed)
  SharedDtor();
}

void ExternAfterSimConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternAfterSimConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternAfterSimConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternAfterSimConfirmed_descriptor_;
}

const ExternAfterSimConfirmed& ExternAfterSimConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternAfterSimConfirmed* ExternAfterSimConfirmed::default_instance_ = NULL;

ExternAfterSimConfirmed* ExternAfterSimConfirmed::New(::google::protobuf::Arena* arena) const {
  ExternAfterSimConfirmed* n = new ExternAfterSimConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternAfterSimConfirmed::Clear() {
}

bool ExternAfterSimConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternAfterSimConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternAfterSimConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternAfterSimConfirmed)
  return false;
#undef DO_
}

void ExternAfterSimConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternAfterSimConfirmed)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternAfterSimConfirmed)
}

::google::protobuf::uint8* ExternAfterSimConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternAfterSimConfirmed)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternAfterSimConfirmed)
  return target;
}

int ExternAfterSimConfirmed::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternAfterSimConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternAfterSimConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternAfterSimConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternAfterSimConfirmed::MergeFrom(const ExternAfterSimConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ExternAfterSimConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternAfterSimConfirmed::CopyFrom(const ExternAfterSimConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternAfterSimConfirmed::IsInitialized() const {

  return true;
}

void ExternAfterSimConfirmed::Swap(ExternAfterSimConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternAfterSimConfirmed::InternalSwap(ExternAfterSimConfirmed* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternAfterSimConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternAfterSimConfirmed_descriptor_;
  metadata.reflection = ExternAfterSimConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternAfterSimConfirmed

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AgentsStuck::kAgentIdFieldNumber;
#endif  // !_MSC_VER

AgentsStuck::AgentsStuck()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.AgentsStuck)
}

void AgentsStuck::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AgentsStuck::AgentsStuck(const AgentsStuck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.AgentsStuck)
}

void AgentsStuck::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

AgentsStuck::~AgentsStuck() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.AgentsStuck)
  SharedDtor();
}

void AgentsStuck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentsStuck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentsStuck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentsStuck_descriptor_;
}

const AgentsStuck& AgentsStuck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

AgentsStuck* AgentsStuck::default_instance_ = NULL;

AgentsStuck* AgentsStuck::New(::google::protobuf::Arena* arena) const {
  AgentsStuck* n = new AgentsStuck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AgentsStuck::Clear() {
  agentid_.Clear();
}

bool AgentsStuck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.AgentsStuck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string agentId = 1;
      case 1: {
        if (tag == 10) {
         parse_agentId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_agentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->agentid(this->agentid_size() - 1).data(),
            this->agentid(this->agentid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.AgentsStuck.agentId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_agentId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.AgentsStuck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.AgentsStuck)
  return false;
#undef DO_
}

void AgentsStuck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.AgentsStuck)
  // repeated string agentId = 1;
  for (int i = 0; i < this->agentid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->agentid(i).data(), this->agentid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "org.matsim.hybrid.AgentsStuck.agentId");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agentid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.AgentsStuck)
}

::google::protobuf::uint8* AgentsStuck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.AgentsStuck)
  // repeated string agentId = 1;
  for (int i = 0; i < this->agentid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->agentid(i).data(), this->agentid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.AgentsStuck.agentId");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->agentid(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.AgentsStuck)
  return target;
}

int AgentsStuck::ByteSize() const {
  int total_size = 0;

  // repeated string agentId = 1;
  total_size += 1 * this->agentid_size();
  for (int i = 0; i < this->agentid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->agentid(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentsStuck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AgentsStuck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentsStuck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentsStuck::MergeFrom(const AgentsStuck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  agentid_.MergeFrom(from.agentid_);
}

void AgentsStuck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentsStuck::CopyFrom(const AgentsStuck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentsStuck::IsInitialized() const {

  return true;
}

void AgentsStuck::Swap(AgentsStuck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AgentsStuck::InternalSwap(AgentsStuck* other) {
  agentid_.UnsafeArenaSwap(&other->agentid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AgentsStuck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentsStuck_descriptor_;
  metadata.reflection = AgentsStuck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AgentsStuck

// repeated string agentId = 1;
 int AgentsStuck::agentid_size() const {
  return agentid_.size();
}
 void AgentsStuck::clear_agentid() {
  agentid_.Clear();
}
 const ::std::string& AgentsStuck::agentid(int index) const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.AgentsStuck.agentId)
  return agentid_.Get(index);
}
 ::std::string* AgentsStuck::mutable_agentid(int index) {
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.AgentsStuck.agentId)
  return agentid_.Mutable(index);
}
 void AgentsStuck::set_agentid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.AgentsStuck.agentId)
  agentid_.Mutable(index)->assign(value);
}
 void AgentsStuck::set_agentid(int index, const char* value) {
  agentid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.AgentsStuck.agentId)
}
 void AgentsStuck::set_agentid(int index, const char* value, size_t size) {
  agentid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.AgentsStuck.agentId)
}
 ::std::string* AgentsStuck::add_agentid() {
  return agentid_.Add();
}
 void AgentsStuck::add_agentid(const ::std::string& value) {
  agentid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:org.matsim.hybrid.AgentsStuck.agentId)
}
 void AgentsStuck::add_agentid(const char* value) {
  agentid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:org.matsim.hybrid.AgentsStuck.agentId)
}
 void AgentsStuck::add_agentid(const char* value, size_t size) {
  agentid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:org.matsim.hybrid.AgentsStuck.agentId)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
AgentsStuck::agentid() const {
  // @@protoc_insertion_point(field_list:org.matsim.hybrid.AgentsStuck.agentId)
  return agentid_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
AgentsStuck::mutable_agentid() {
  // @@protoc_insertion_point(field_mutable_list:org.matsim.hybrid.AgentsStuck.agentId)
  return &agentid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AgentsStuckConfirmed::AgentsStuckConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.AgentsStuckConfirmed)
}

void AgentsStuckConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AgentsStuckConfirmed::AgentsStuckConfirmed(const AgentsStuckConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.AgentsStuckConfirmed)
}

void AgentsStuckConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AgentsStuckConfirmed::~AgentsStuckConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.AgentsStuckConfirmed)
  SharedDtor();
}

void AgentsStuckConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentsStuckConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentsStuckConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentsStuckConfirmed_descriptor_;
}

const AgentsStuckConfirmed& AgentsStuckConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

AgentsStuckConfirmed* AgentsStuckConfirmed::default_instance_ = NULL;

AgentsStuckConfirmed* AgentsStuckConfirmed::New(::google::protobuf::Arena* arena) const {
  AgentsStuckConfirmed* n = new AgentsStuckConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AgentsStuckConfirmed::Clear() {
}

bool AgentsStuckConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.AgentsStuckConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.AgentsStuckConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.AgentsStuckConfirmed)
  return false;
#undef DO_
}

void AgentsStuckConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.AgentsStuckConfirmed)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.AgentsStuckConfirmed)
}

::google::protobuf::uint8* AgentsStuckConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.AgentsStuckConfirmed)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.AgentsStuckConfirmed)
  return target;
}

int AgentsStuckConfirmed::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentsStuckConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AgentsStuckConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentsStuckConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentsStuckConfirmed::MergeFrom(const AgentsStuckConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void AgentsStuckConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentsStuckConfirmed::CopyFrom(const AgentsStuckConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentsStuckConfirmed::IsInitialized() const {

  return true;
}

void AgentsStuckConfirmed::Swap(AgentsStuckConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AgentsStuckConfirmed::InternalSwap(AgentsStuckConfirmed* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AgentsStuckConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentsStuckConfirmed_descriptor_;
  metadata.reflection = AgentsStuckConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AgentsStuckConfirmed

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ExternalConnect::kHostFieldNumber;
const int ExternalConnect::kPortFieldNumber;
#endif  // !_MSC_VER

ExternalConnect::ExternalConnect()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternalConnect)
}

void ExternalConnect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternalConnect::ExternalConnect(const ExternalConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternalConnect)
}

void ExternalConnect::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

ExternalConnect::~ExternalConnect() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternalConnect)
  SharedDtor();
}

void ExternalConnect::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExternalConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalConnect_descriptor_;
}

const ExternalConnect& ExternalConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternalConnect* ExternalConnect::default_instance_ = NULL;

ExternalConnect* ExternalConnect::New(::google::protobuf::Arena* arena) const {
  ExternalConnect* n = new ExternalConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternalConnect::Clear() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool ExternalConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternalConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "org.matsim.hybrid.ExternalConnect.host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternalConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternalConnect)
  return false;
#undef DO_
}

void ExternalConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternalConnect)
  // optional string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.ExternalConnect.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternalConnect)
}

::google::protobuf::uint8* ExternalConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternalConnect)
  // optional string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "org.matsim.hybrid.ExternalConnect.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternalConnect)
  return target;
}

int ExternalConnect::ByteSize() const {
  int total_size = 0;

  // optional string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // optional int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalConnect::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternalConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalConnect::MergeFrom(const ExternalConnect& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void ExternalConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalConnect::CopyFrom(const ExternalConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalConnect::IsInitialized() const {

  return true;
}

void ExternalConnect::Swap(ExternalConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalConnect::InternalSwap(ExternalConnect* other) {
  host_.Swap(&other->host_);
  std::swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternalConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalConnect_descriptor_;
  metadata.reflection = ExternalConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternalConnect

// optional string host = 1;
 void ExternalConnect::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ExternalConnect::host() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.ExternalConnect.host)
  return host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExternalConnect::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.ExternalConnect.host)
}
 void ExternalConnect::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:org.matsim.hybrid.ExternalConnect.host)
}
 void ExternalConnect::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:org.matsim.hybrid.ExternalConnect.host)
}
 ::std::string* ExternalConnect::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:org.matsim.hybrid.ExternalConnect.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExternalConnect::release_host() {
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExternalConnect::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:org.matsim.hybrid.ExternalConnect.host)
}

// optional int32 port = 2;
 void ExternalConnect::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 ExternalConnect::port() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.ExternalConnect.port)
  return port_;
}
 void ExternalConnect::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.ExternalConnect.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExternalConnectConfirmed::ExternalConnectConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.ExternalConnectConfirmed)
}

void ExternalConnectConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ExternalConnectConfirmed::ExternalConnectConfirmed(const ExternalConnectConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.ExternalConnectConfirmed)
}

void ExternalConnectConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ExternalConnectConfirmed::~ExternalConnectConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.ExternalConnectConfirmed)
  SharedDtor();
}

void ExternalConnectConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExternalConnectConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExternalConnectConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExternalConnectConfirmed_descriptor_;
}

const ExternalConnectConfirmed& ExternalConnectConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

ExternalConnectConfirmed* ExternalConnectConfirmed::default_instance_ = NULL;

ExternalConnectConfirmed* ExternalConnectConfirmed::New(::google::protobuf::Arena* arena) const {
  ExternalConnectConfirmed* n = new ExternalConnectConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExternalConnectConfirmed::Clear() {
}

bool ExternalConnectConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.ExternalConnectConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.ExternalConnectConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.ExternalConnectConfirmed)
  return false;
#undef DO_
}

void ExternalConnectConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.ExternalConnectConfirmed)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.ExternalConnectConfirmed)
}

::google::protobuf::uint8* ExternalConnectConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.ExternalConnectConfirmed)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.ExternalConnectConfirmed)
  return target;
}

int ExternalConnectConfirmed::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExternalConnectConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExternalConnectConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExternalConnectConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExternalConnectConfirmed::MergeFrom(const ExternalConnectConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void ExternalConnectConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalConnectConfirmed::CopyFrom(const ExternalConnectConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalConnectConfirmed::IsInitialized() const {

  return true;
}

void ExternalConnectConfirmed::Swap(ExternalConnectConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalConnectConfirmed::InternalSwap(ExternalConnectConfirmed* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExternalConnectConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExternalConnectConfirmed_descriptor_;
  metadata.reflection = ExternalConnectConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExternalConnectConfirmed

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MaximumNumberOfAgents::kNumberFieldNumber;
#endif  // !_MSC_VER

MaximumNumberOfAgents::MaximumNumberOfAgents()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MaximumNumberOfAgents)
}

void MaximumNumberOfAgents::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MaximumNumberOfAgents::MaximumNumberOfAgents(const MaximumNumberOfAgents& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MaximumNumberOfAgents)
}

void MaximumNumberOfAgents::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  number_ = 0;
}

MaximumNumberOfAgents::~MaximumNumberOfAgents() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MaximumNumberOfAgents)
  SharedDtor();
}

void MaximumNumberOfAgents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaximumNumberOfAgents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaximumNumberOfAgents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaximumNumberOfAgents_descriptor_;
}

const MaximumNumberOfAgents& MaximumNumberOfAgents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MaximumNumberOfAgents* MaximumNumberOfAgents::default_instance_ = NULL;

MaximumNumberOfAgents* MaximumNumberOfAgents::New(::google::protobuf::Arena* arena) const {
  MaximumNumberOfAgents* n = new MaximumNumberOfAgents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaximumNumberOfAgents::Clear() {
  number_ = 0;
}

bool MaximumNumberOfAgents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MaximumNumberOfAgents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MaximumNumberOfAgents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MaximumNumberOfAgents)
  return false;
#undef DO_
}

void MaximumNumberOfAgents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MaximumNumberOfAgents)
  // optional int32 number = 1;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MaximumNumberOfAgents)
}

::google::protobuf::uint8* MaximumNumberOfAgents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MaximumNumberOfAgents)
  // optional int32 number = 1;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MaximumNumberOfAgents)
  return target;
}

int MaximumNumberOfAgents::ByteSize() const {
  int total_size = 0;

  // optional int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaximumNumberOfAgents::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MaximumNumberOfAgents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaximumNumberOfAgents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaximumNumberOfAgents::MergeFrom(const MaximumNumberOfAgents& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void MaximumNumberOfAgents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaximumNumberOfAgents::CopyFrom(const MaximumNumberOfAgents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaximumNumberOfAgents::IsInitialized() const {

  return true;
}

void MaximumNumberOfAgents::Swap(MaximumNumberOfAgents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaximumNumberOfAgents::InternalSwap(MaximumNumberOfAgents* other) {
  std::swap(number_, other->number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaximumNumberOfAgents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaximumNumberOfAgents_descriptor_;
  metadata.reflection = MaximumNumberOfAgents_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaximumNumberOfAgents

// optional int32 number = 1;
 void MaximumNumberOfAgents::clear_number() {
  number_ = 0;
}
 ::google::protobuf::int32 MaximumNumberOfAgents::number() const {
  // @@protoc_insertion_point(field_get:org.matsim.hybrid.MaximumNumberOfAgents.number)
  return number_;
}
 void MaximumNumberOfAgents::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:org.matsim.hybrid.MaximumNumberOfAgents.number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MaximumNumberOfAgentsConfirmed::MaximumNumberOfAgentsConfirmed()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
}

void MaximumNumberOfAgentsConfirmed::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MaximumNumberOfAgentsConfirmed::MaximumNumberOfAgentsConfirmed(const MaximumNumberOfAgentsConfirmed& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
}

void MaximumNumberOfAgentsConfirmed::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

MaximumNumberOfAgentsConfirmed::~MaximumNumberOfAgentsConfirmed() {
  // @@protoc_insertion_point(destructor:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
  SharedDtor();
}

void MaximumNumberOfAgentsConfirmed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaximumNumberOfAgentsConfirmed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaximumNumberOfAgentsConfirmed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaximumNumberOfAgentsConfirmed_descriptor_;
}

const MaximumNumberOfAgentsConfirmed& MaximumNumberOfAgentsConfirmed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MATSimInterface_2eproto();
  return *default_instance_;
}

MaximumNumberOfAgentsConfirmed* MaximumNumberOfAgentsConfirmed::default_instance_ = NULL;

MaximumNumberOfAgentsConfirmed* MaximumNumberOfAgentsConfirmed::New(::google::protobuf::Arena* arena) const {
  MaximumNumberOfAgentsConfirmed* n = new MaximumNumberOfAgentsConfirmed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaximumNumberOfAgentsConfirmed::Clear() {
}

bool MaximumNumberOfAgentsConfirmed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
  return false;
#undef DO_
}

void MaximumNumberOfAgentsConfirmed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
  // @@protoc_insertion_point(serialize_end:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
}

::google::protobuf::uint8* MaximumNumberOfAgentsConfirmed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
  // @@protoc_insertion_point(serialize_to_array_end:org.matsim.hybrid.MaximumNumberOfAgentsConfirmed)
  return target;
}

int MaximumNumberOfAgentsConfirmed::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaximumNumberOfAgentsConfirmed::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MaximumNumberOfAgentsConfirmed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaximumNumberOfAgentsConfirmed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaximumNumberOfAgentsConfirmed::MergeFrom(const MaximumNumberOfAgentsConfirmed& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void MaximumNumberOfAgentsConfirmed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaximumNumberOfAgentsConfirmed::CopyFrom(const MaximumNumberOfAgentsConfirmed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaximumNumberOfAgentsConfirmed::IsInitialized() const {

  return true;
}

void MaximumNumberOfAgentsConfirmed::Swap(MaximumNumberOfAgentsConfirmed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaximumNumberOfAgentsConfirmed::InternalSwap(MaximumNumberOfAgentsConfirmed* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaximumNumberOfAgentsConfirmed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaximumNumberOfAgentsConfirmed_descriptor_;
  metadata.reflection = MaximumNumberOfAgentsConfirmed_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaximumNumberOfAgentsConfirmed

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hybrid
}  // namespace matsim
}  // namespace org

// @@protoc_insertion_point(global_scope)
